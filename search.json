[{"path":"https://africabirddata.github.io/BIRDIE/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 BIRDIE Development Team Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v01-birdie-basics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BIRDIE: Basics","text":"BIRDIE biodiversity data pipeline wetlands waterbirds, organized R package additional tools elements. BIRDIE high-level utility, therefore quite dependencies, notably: ABAP, CWAC ABDtools packages, provide functionality needed acquire data main databases used pipeline. pipeline also makes heavy use tidyverse packages, dplyr tidyr, well sf raster packages handle spatial data. also uses packages fitting occupancy state-space models spOccupancy jagsUI, respectively. main objective pipeline process ABAP CWAC data meaningful waterbird abundance distribution estimates. Therefore, code organized two main modules: abundance (ABU1) distribution (DST1). modules four distinct steps : data preparation, model fit, model diagnostics model summary. Inside modules multiple functions perform different tasks. results hierarchical structure describe later. important thing keep mind now high-level functions control whole modules, lower-level functions perform tasks within module. Note BIRDIE pipeline can run locally personal machine remotely, dedicated server. able transfer functionality multiple environments need keep structure directories use store data, models, outputs scripts. Make intro users might want modify pipeline Explain intended user documentation","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v01-birdie-basics.html","id":"directory-structure","dir":"Articles","previous_headings":"","what":"Directory structure","title":"BIRDIE: Basics","text":"BIRDIE repository typical structure R package, indeed R package, additional directories. directories: R, data, man vignettes, standard R-package directories beta place test new functionality can get quite messy deprecated functions used point longer used. may deleted periodically. analysis space store data (don’t come package), scripts outputs pipeline uses produces. comms contains code used BIRDIE presentations, papers communications. structure BIRDIE root directory important repository work package. Maintaining structure analysis directory also important, allows us use pipeline different machines find need. particular, sub-directories: data, output, models scripts needed able run pipeline. pipeline functions use paths directories, important keep names unchanged. can configure pipeline configPipeline() function let know full path directories (home directory computer). see later. analysis/output directory important store model outputs. Inside directory need sub-directories named SAFRING code (ABAP CWAC code) species want run pipeline . example, wanted run pipeline species 6 (Little Grebe) need directory analisys/output/6 running pipeline. Inside analysis/output also need two directories: analysis/reports analysis/export. first one used store different report files created pipeline second one stores outputs transferred BIRDIE database.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v01-birdie-basics.html","id":"types-of-functions","dir":"Articles","previous_headings":"","what":"Types of functions","title":"BIRDIE: Basics","text":"two basic types functions BIRDIE package: Pipeline functions: name functions start ppl_ control flow pipeline. words, role execute functions run specific steps data processing, preparing data running models. Pipeline functions don’t data processing per se reading writing disk. pipeline functions correspond roughly main pipeline modules: species distribution species abundance, different processing steps pipeline: prepare data, fit models, diagnose fits summarise results. least one pipeline function modules steps. Processing functions: don’t naming convention don’t start ppl_. core workforce functions package run different data-processing steps pipeline. functions divided two groups, need specific package run (e.g., JAGS spOccupancy) package “agnostic” can used regardless package pipeline using moment. Package-specific functions packaged file named utils-packagename.R. made distinction facilitate modularity pipeline. substitute package used pipeline easier find functions need replace file. far utils packages:jags, spOccupancy occuR. generic utils well. functions used administrative tasks, producing log files, setting file paths managing export files. Another way looking distinction thinking “pipeline functions” don’t really value BIRDIE pipeline, perform configuration tasks pipeline. Conversely, non-pipeline functions also used settings still useful (e.g., used annotate data environmental variables fit models). NOTE: general idea, might things missplaced better organized, don’t take structure carved stone!","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v01-birdie-basics.html","id":"control-scripts","dir":"Articles","previous_headings":"","what":"Control scripts","title":"BIRDIE: Basics","text":"BIRDIE functions heavy lifting, set scripts allow user start specific pipeline workflows. main scripts : pipeline_script_dst.R initialises distribution module pipeline_script_abu.R initialises abundance module useful script allows running distribution module parallelising computations species (currently, model fitting) named pipeline_script_dst_parall.R. useful scripts (might get outdated) scripts/misc directories.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v02-birdie-spp-abundance.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BIRDIE: Species abundance","text":"two main analytical modules BIRDIE: distribution abundance. document see use abundance (ABU) module. look control script used run module break different sections understand functions involved analysis .","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v02-birdie-spp-abundance.html","id":"the-control-script","dir":"Articles","previous_headings":"","what":"The control script","title":"BIRDIE: Species abundance","text":"control script can found /analysis/scripts/pipeline_script_abu.R. script three parts: Configuration Create logs Run modules go parts . script really just loop species main pipeline function abundance module ppl_run_pipe_abu1() executed. means interested one species can go ahead use ppl_run_pipe_abu1() function, directly. run abundance module pipeline, enough just run (source()) script. However, default values run full pipeline species, several years, might take quite long. now go different steps pipeline better understand configure want. Note default script use running pipeline, nothing special , use something different suits needs. functionality pipeline comes functions.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v02-birdie-spp-abundance.html","id":"configuration","dir":"Articles","previous_headings":"The control script","what":"Configuration","title":"BIRDIE: Species abundance","text":"configuration section create config object using configPipeline() function used throughout pipeline several functions. configPipeline() function, allows us let pipeline know models want run, years, packages want use, etc. detailed information see ?configPipeline. Rather specifying covariates use models, like distribution module, pass model file name function. configPipeline() look model file analysis/models. supported package moment jagsUI package related functions written BIRDIE stored R/utils-jags.R file. (Note: might better way , creating environment variables something like , works now) abundance module allow us incorporate environmental covariates models, although using moment. use covariates, quinary catchment level. rather taking value covariates specific location take average value observed across quinary catchment time. see BIRDIE ABU: Data preparation vignette. important point need load quinary catchment spatial object pass main pipeline function, can used data preparation (edit path file).","code":"# Configure pipeline config <- configPipeline(     year = 2021,     dur = 29,     mod_file = \"cwac_ssm_two_season_mean_rev_jump.R\",     package = \"jagsUI\",     data_dir = \"analysis/data\",     # this might have to be adapted?     out_dir = \"analysis/output\",    # this might have to be adapted?     server = FALSE )  # Read in catchment data. This should go as an argument catchment <- sf::read_sf(file.path(config$data_dir, \"quinary_catchmt_22.shp\"))  # Re-project and simplify catchment <- catchment %>%     dplyr::select(QUATERNARY, Province, UNIT_ID) %>%     sf::st_simplify(preserveTopology = TRUE, dTolerance = 1000) %>%     sf::st_transform(crs = sf::st_crs(4326))"},{"path":"https://africabirddata.github.io/BIRDIE/articles/v02-birdie-spp-abundance.html","id":"create-logs","dir":"Articles","previous_headings":"The control script","what":"Create logs","title":"BIRDIE: Species abundance","text":"pipeline system log activity. useful keep track species years pipeline run whether problems (e.g., species data points model fit errors). activity stored .csv files saved analysis/output/reports. information check logging functions BIRDIE package stored utils.R file, notably see ?createLog() general logs ?logFitStatus() logs model runs. see run pipeline several species, makes sense create log file first species, use file store information species well, one row .csv file. Past first setup phase, pipeline look recent log file add information , regardless whether information already present .","code":"# Create log? createLog(config, log_file = NULL, date_time = NULL, species = NA, model = NA,           year = NA, data = NA, fit = NA, diagnose = NA, summary = NA,           package = NA, notes = \"Log file created\")"},{"path":"https://africabirddata.github.io/BIRDIE/articles/v02-birdie-spp-abundance.html","id":"run-modules","dir":"Articles","previous_headings":"The control script","what":"Run modules","title":"BIRDIE: Species abundance","text":"final part script runs main function abundance module pipeline, looping species. ppl_run_pipe_abu1() can run steps module: data preparation, model fitting, model diagnostics model summary, can run just . use config object know package use model fitting paths store model-ready data model outputs. Note steps, may take quite long. example, prepare data pipeline connects Google Earth Engine annotates data environmental covariates, can take . also requires internet connection. Keep mind note can skip steps using right arguments. information see ?ppl_run_pipe_abu1.","code":"for(i in 1:length(config$species)){      sp_code <- config$species[i]      message(paste0(\"Working on species \", sp_code, \" (\", i, \" of \", length(config$species), \")\"))      # Run abudance pipeline module 1     status_abu1 <- ppl_run_pipe_abu1(sp_code, config,                                      steps = c(\"fit\", \"diagnose\", \"summary\"),                                      prep_data_steps = c(\"subset\", \"missing\", \"gee\", \"model\"),                                      summary_scale = \"model\",                                      catchment = catchment,                                      force_gee_upload = FALSE,                                      force_gee = FALSE,                                      monitor = TRUE)      message(paste(\"ABU1 status =\", status_abu1))  }"},{"path":"https://africabirddata.github.io/BIRDIE/articles/v03-birdie-spp-distributions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BIRDIE: species distributions","text":"two main analytical modules BIRDIE: distribution abundance modules. document see use distribution (DST) module. look control script used run module break different sections understand functions involved analysis .","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v03-birdie-spp-distributions.html","id":"the-control-script","dir":"Articles","previous_headings":"","what":"The control script","title":"BIRDIE: species distributions","text":"control script can found /analysis/scripts/pipeline_script_dst.R. script three parts: Configuration Create logs Run modules go parts . script really just loop species main pipeline function distribution module ppl_run_pipe_dst1() executed. means interested one species can go ahead use ppl_run_pipe_dst1() function. run distribution module pipeline, enough just run script. However, default values run full pipeline species, several years, might take quite long. now go different steps pipeline goes better understand configure want. Note default script use running pipeline, nothing special , use something different suits needs.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v03-birdie-spp-distributions.html","id":"configuration","dir":"Articles","previous_headings":"The control script","what":"Configuration","title":"BIRDIE: species distributions","text":"piece code , list couple possible detection models can choose (handy planning conducting several runs pipeline different models), create config object used throughout pipeline several functions. configPipeline() function, allows us let pipeline know models want run, years, packages want use, etc. detailed information see ?configPipeline. (Note: might better way , creating environment variables something like , works now)","code":"# We are currently working with several detection models det_mods <- list(det_mod1 = c(\"(1|obs_id)\", \"log_hours\", \"prcp\", \"tdiff\", \"cwac\"),                  det_mod2 = c(\"(1|obs_id)\", \"(1|site_id)\", \"log_hours\", \"prcp\", \"tdiff\", \"cwac\"))  # Configure pipeline config <- configPipeline(year = 2010,                          dur = 3,                          occ_mod = c(\"log_dist_coast\", \"elev\", \"log_hum.km2\", \"wetcon\",                                      \"watrec\", \"watext\", \"log_watext\", \"watext:watrec\",                                      \"ndvi\", \"prcp\", \"tdiff\"),                          det_mod = det_mods$det_mod1,                          fixed_vars = c(\"Pentad\", \"lon\", \"lat\", \"watocc_ever\", \"wetext_2018\",\"wetcon_2018\",                                         \"dist_coast\", \"elev\"),                          package = \"spOccupancy\",                          data_dir = \"analysis/data\",     # this might have to be adapted?                          out_dir = \"analysis/output\",    # this might have to be adapted?                          server = FALSE)"},{"path":"https://africabirddata.github.io/BIRDIE/articles/v03-birdie-spp-distributions.html","id":"create-logs","dir":"Articles","previous_headings":"The control script","what":"Create logs","title":"BIRDIE: species distributions","text":"pipeline system log activity. useful keep track species years pipeline run whether problems (e.g., species data points model fit errors). activity stored .csv files saved analysis/output/reports. information check logging functions BIRDIE package stored utils.R file, notably see ?createLog() general logs ?logFitStatus() logs model runs. see run pipeline several species, makes sense create log file first species ((== 1)), use file store information species, one row .csv file. just created one log species, one .csv log file species. past first setup phase, pipeline look recent log file add information , regardless whether information already present .","code":"# Create log?     if(i == 1){         createLog(config, log_file = NULL, date_time = NULL, species = NA, model = NA,                   year = NA, data = NA, fit = NA, diagnose = NA, summary = NA,                   package = NA, notes = \"Log file created\")     }"},{"path":"https://africabirddata.github.io/BIRDIE/articles/v03-birdie-spp-distributions.html","id":"run-modules","dir":"Articles","previous_headings":"The control script","what":"Run modules","title":"BIRDIE: species distributions","text":"final part script runs modules pipeline interested (currently one, “module 2 - Area Occupancy derived indicators”, now run data base). loop different years set configuration phase run main function distribution module ppl_run_pipe_dst1(). function can run steps module: data preparation, model fitting, model diagnostics model summary, can run just . use config object know package use model fitting paths store model-ready data model outputs. Note steps, may take quite long. example, prepare data pipeline connects Google Earth Engine annotates data environmental covariates, can take . also requires internet connection. Keep mind note can skip steps using right arguments. information see ?ppl_run_pipe_dst1.","code":"for(t in seq_along(config$years)){          year_sel <- config$years[t]          out_dst1 <- ppl_run_pipe_dst1(sp_code = sp_code,                                   year = year_sel,                                   config = config,                                   steps = c(\"data\", \"fit\", \"summary\", \"diagnose\"),                                   force_gee_dwld = FALSE,                                   monitor_gee = TRUE,                                   force_site_visit = TRUE,                                   force_abap_dwld = FALSE,                                   spatial = FALSE,                                   print_fitting = TRUE)          message(paste(\"Pipeline DST1 status =\", out_dst1))          if(out_dst1 != 0){         next     }      }"},{"path":"https://africabirddata.github.io/BIRDIE/articles/v04-birdie-abu-data-prep.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BIRDIE ABU: Data preparation","text":"species abundance module (ABU) BIRDIE pipeline four main steps: data preparation, model fitting, model diagnostics model summary. See BIRDIE: basics BIRDIE: species abundance vignettes general details BIRDIE ABU module, respectively. vignette, go different tasks performed first step ABU module: data preparation. main function used data preparation ppl_create_data_ssm(). ppl_ function, therefore doesn’t much processing (see BIRDIE: basics confusing), call right functions work. Data preparation three main tasks: Download CWAC data subset sites suitable modelling Complete dataset adding missing counts (NA) Annotate count data environmental covariates Format data state-space modelling just running ppl_create_data_ssm() tasks performed data prepared. However, understand goes “hood”, explain tasks, conducted, . Note data preparation can time-consuming efficient prepare data multiple years . currently fitting 20 years data time, number years prepared ppl_create_data_ssm(). number years prepared given dur argument configPipeline() function.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v04-birdie-abu-data-prep.html","id":"download-cwac-data-and-subset-sites","dir":"Articles","previous_headings":"","what":"Download CWAC data and subset sites","title":"BIRDIE ABU: Data preparation","text":"first section ppl_create_ssm_data() function run tell function subset sites complete dataset missing counts. section download CWAC data using function CWAC::getCwacSppCounts() CWAC R package. proceed include data CWAC data base. moment writing data DuToit’s pan contributed Doug Harebottle. data formatted incorporated data downloaded CWAC. data wanted include need modify part ppl_create_data_ssm() function code. data combined subset sites counted least five times summer five times winter years 1993 2021. analyse data species counted least five sites characteristics. species don’t meet requirements analysed differently, although still don’t alternative model .","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v04-birdie-abu-data-prep.html","id":"adding-missing-counts","dir":"Articles","previous_headings":"","what":"Adding missing counts","title":"BIRDIE ABU: Data preparation","text":"data comes CWAC database reference missing counts, meaning year nobody went count certain wetland certain season data point just absent data set. like instead record season year missing (NA) count. convenient multiple reasons, perhaps important one JAGS automatically treat missing data points parameters need estimated. give missing summer counts date corresponds first day January (perhaps reconsider , summer counts start 15th January) winter counts assign first July.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v04-birdie-abu-data-prep.html","id":"annotate-with-environmental-covariates","dir":"Articles","previous_headings":"","what":"Annotate with environmental covariates","title":"BIRDIE ABU: Data preparation","text":"Although currently using covariates modelling, may use environmental covariates model abundance, requires count data annotated information. facilitate automation process periodic updates new data becomes available, use data sets functionality offered Google Earth Engine (GEE). functionality connect transfer data /GEE provided ABDtools R package. package basically wraps functions rgee; another package depends heavily. Therefore, requirement rgee properly installed configured able perform data-annotation tasks. Check GitHub repos rgee ABDtools. two packages installed configured, can use functionality pipeline. BIRDIE use function prepGEECatchmData() annotate CWAC data. See ?prepGEECatchmData() details. function makes reference “catchment” moment function prepared use quinary catchment CWAC sites located reference area covariates. rather extracting environmental information specific point location, extract pixels contained quinary catchment take average value covariate across pixels. Annotating different variables using GEE requires different procedures. Therefore, way flexibly communicate functions variables want annotate data . Instead, hard-coded variables using BIRDIE pipeline. wanted change variables use, modify prepGEECatchmData() function. ideal, set currently. One important thing keep mind consider waterbird summer populations affected environmental conditions previous year, rather year. summer occur January therefore average conditions previous year likely affect summer populations directly year, still presented time counting. Another important thing keep mind environmental layers used don’t information past certain date. set functions way data past last date layer get annotated latest available information (last date layer). Whenever pipeline run advised review environmental layer used last date information available , update functions necessary.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v04-birdie-abu-data-prep.html","id":"format-data-for-state-space-modelling","dir":"Articles","previous_headings":"","what":"Format data for state-space modelling","title":"BIRDIE ABU: Data preparation","text":"final step prepare data modelling. format fit specific package yet. create certain variables useful ids site, year visit. importantly, choice make terms seasonal counts duplicated. now, keep counts labelled summer winter counts CWAC data consider replicates.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v05-birdie-abu-model-fitting.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BIRDIE ABU: Model fitting","text":"species abundance module (ABU) BIRDIE pipeline four main steps: data preparation, model fitting, model diagnostics model summary. See BIRDIE: basics BIRDIE: species abundance vignettes general details BIRDIE ABU module, respectively. vignette, go different tasks performed first step ABU module: data preparation. main function used model fitting ppl_fit_ssm_model(). ppl_ function, therefore doesn’t much processing (see BIRDIE: basics confusing), call right functions work. output ppl_fit_ssm_model() always model fit change depending package selected configPipeline() function. moment, one option, fit state-space model using JAGS (package jagsUI). following section, explain process fitting model using jagsUI.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v05-birdie-abu-model-fitting.html","id":"fitting-a-model-using-the-jagsui-package","dir":"Articles","previous_headings":"","what":"Fitting a model using the jagsUI package","title":"BIRDIE ABU: Model fitting","text":"moment option fitting state-space model using jagsUI package therefore main ppl_fit_ssm_model() takes care (.e., package specific function fitting model - although might want change ). use jagsUI::jags.basic() function, outputs raw mcmc samples. outputs use less memory default jagsUI processed outputs compute additional elements, posterior means standard deviations. compute additional elements need , using custom function processJAGSoutput(), similar internal jagsUI:::processoutput(). just slightly modified remove calculations don’t need make computations bit lighter. function design work JAGS stored R/utils-jags.R file.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v05-birdie-abu-model-fitting.html","id":"latest-model-specification","dir":"Articles","previous_headings":"","what":"Latest model specification","title":"BIRDIE ABU: Model fitting","text":"State-space models used describe understand dynamic systems may perfectly observed. Within framework, consider waterbird abundance process evolves time, observe visits CWAC sites. However, counts conducted observers distorted imperfect detection translates counting errors. counting repeatedly time, assuming abundance evolves smoothly time compared observation error, can disentangle two processes. consider log observed counts (\\(y_i\\)) sampling occasion \\(\\) (generally two sampling occasions per year, one mid-summer one mid-winter), given site, arise normal distribution, \\[\\log{(y_i)} \\sim N(\\mu_i, \\sigma_i^2)\\] \\(\\mu_i\\)latent (unobserved) log abundance waterbirds present site sampling occasion \\(\\) \\(\\sigma^2\\) corresponding variance observers counting error, also log scale. Therefore, counts depend number waterbirds present site, errors counts birds. model changes waterbird abundance two-seasons year \\(t\\), define \\(s_t\\) summer abundance \\(w_t\\) winter abundance. Note , although currently consider one count per season, potentially multiple counts single year season. However, underlying true abundance considered stay constant given year season (clarity, note also sampling occasions indexed \\(\\), years indexed \\(t\\)). Thus, expected (log) abundance given count can written \\[\\mu_{} = s_t \\textrm{summer} + w_t \\textrm{winter}\\] ‘summer’ indicator variable takes value 1 summer 0 winter, ‘winter’ opposite. define abundance dynamics : \\[s_t = s_{t-1} + \\beta_t\\] \\[w_t = s_t + \\xi_t\\] \\(\\beta_t\\) corresponds change summer abundance year \\(t-1\\) year \\(t\\), \\(\\xi_t\\) difference summer winter abundance, log scale. exponentiated, parameters can interpreted rate change population winter--summer ratio population, respectively. impose relatively smooth changes abundance defining autocorrelation \\(\\beta_t\\) \\(\\xi_t\\) terms time. addition, define mean reverting process whereby populations certain site tend revert site-specific mean “preferred” abundance \\(\\psi_{(s)t}\\) summer \\(\\psi_{wt}\\) winter. specification important prevent estimated populations explode periods missing data. mean abundances may change occasionally, see . define expected change summer population (winter population evolves similarly) \\[\\zeta_t' = \\psi_{(s)t} - s_t\\] define certain persistence population trends \\[\\beta_{t+1} = \\beta_t + \\phi_s(\\zeta_t' - \\beta_t) + \\zeta_t\\] \\(\\zeta_t \\sim N(0, \\sigma_{\\zeta}^2)\\) \\(\\phi_s\\) lies zero one, controls quickly population reverts back mean. Finally, define jump process, whereby population can present sudden changes abundance conform general temporal pattern. changes frequent waterbird populations , although possibly associated conditions sites, challenging understand drivers behind . define \\[\\textrm{jump}_{(s)t} = \\textrm{}_{(s)t}z_{(s)t}\\] \\(\\textrm{}_{(s)t} \\sim \\textrm{Bernoulli}(p_s)\\) \\(z_{(s)t} \\sim N(0, \\sigma_{jump_s}^2)\\). make \\(p_s\\) small probability (prior) \\(\\sigma_{jump_s}\\) large relative \\(\\sigma_{\\zeta}\\) favour , large jumps rather frequent small ones. jumps population may stick time, meaning affect mean abundance sites. Therefore, jump population observed, new level becomes mean need new jump go back original mean. way ensure deviating mean coming back captured two separate jumps necessarily jump mean reversion. Therefore, \\[\\psi_{(s)t+1} = \\psi_{(s)t} + \\textrm{jump}_{(s)t}\\] order capture population jumps changes represented \\(\\beta\\) set \\[\\beta_{t} = \\beta_{t} + \\textrm{jump}_{(s)t}\\] Note reporting purposes , important don’t want jumps considered update step \\(\\beta_t\\) (see expression _{t+1}). model winter population similar summer one \\[\\xi_t' = \\psi_{(w)t} - s_{t+1}\\] represents expected change winter population year \\(t+1\\), actual change given \\[\\lambda_{t+1} = \\lambda_t + \\phi_w(\\xi_t' - \\lambda_t) + \\xi_t\\] \\(\\xi_t \\sim N(0, \\sigma_{\\xi}^2)\\) \\(\\phi_w\\) lies zero one, controls quickly population reverts back mean. can also jumps winter populations given \\[\\textrm{jump}_{(w)t} = \\textrm{}_{(w)t}z_{(w)t}\\] \\(\\textrm{}_{(w)t} \\sim \\textrm{Bernoulli}(p_w)\\) \\(z_{(w)t} \\sim N(0, \\sigma_{jump_w}^2)\\). make \\(p_w\\) small probability (prior) \\(\\sigma_{jump_s}\\) large relative \\(\\sigma_{\\xi}\\). jumps may also stick population \\[\\psi_{(w)t+1} = \\psi_{(w)t} + \\textrm{jump}_{(w)t}\\] incorporated \\(\\lambda_t\\) reporting purposes, \\[\\lambda_{t} = \\lambda_{t} + \\textrm{jump}_{(w)t}\\]","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v06-birdie-abu-model-diagnostics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BIRDIE ABU: Model diagnostics","text":"species abundance module (ABU) BIRDIE pipeline four main steps: data preparation, model fitting, model diagnostics model summary. See BIRDIE: basics BIRDIE: species abundance vignettes general details BIRDIE DST module, respectively. vignette, go different tasks performed step DST module: model diagnostics. main function used model diagnosis ppl_diagnose_ssm(). ppl_ function, therefore doesn’t much processing (see BIRDIE: basics confusing), call right functions work. diagnostics step look two indicators: Gelman-Rubin convergence diagnostic (\\(\\hat{R}\\)) goodness--fit Bayesian p-value. first diagnostic computed function diagnoseRhatJagsSsm() second one function diagnoseGofJagsSsm() (functions found R/utils-jags.R). ppl_diagnose_ssm() combines output two functions single table stored analysis/output/sp_code/abu_diagnostics_spOccupancy_YYYY_sp_code.csv, YYYY year data fitting model sp_code species code. way, easy extract diagnostic files different directories, combine table quickly explore potential issues.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v06-birdie-abu-model-diagnostics.html","id":"diagnosing-convergence","dir":"Articles","previous_headings":"","what":"Diagnosing convergence","title":"BIRDIE ABU: Model diagnostics","text":"function diagnoseRhatJagsSsm() extracts \\(\\hat{R}\\) values computed JAGS estimated parameters tabulates . table, parameter appears one column gets 0 \\(|1 - \\hat{R}| < 0.1\\) 1 otherwise. extra columns added, number non-convergent parameters, number detections observed, number observations, etc.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v06-birdie-abu-model-diagnostics.html","id":"diagnosing-goodness-of-fit","dir":"Articles","previous_headings":"","what":"Diagnosing goodness-of-fit","title":"BIRDIE ABU: Model diagnostics","text":"function diagnoseGofJagsSsm() conducts posterior predictive checks (PPC) calculates Bayesian p-value. procedure consists simulating number count data sets posterior distribution comparing observed data. calculate mean standard deviation simulated data sets. , calculate number data sets mean observed data (“Tmean”). obtain proportions close 0.5 means predictions unbiased. follow similar procedure standard deviations (“Tsd”) see predictions similar dispersion observed data. Finally, simulation calculate mean difference observed data (“Tdiff”), give us idea magnitude bias, exist.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v06-birdie-abu-model-diagnostics.html","id":"shiny-apps","dir":"Articles","previous_headings":"","what":"Shiny apps","title":"BIRDIE ABU: Model diagnostics","text":"developed Shiny app allows us extract diagnostics species year explore interactive way. app still experimental can found analysis/tools/diagnose_dabu","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v07-birdie-abu-model-summary.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BIRDIE ABU: Model summary","text":"species abundance module (ABU) BIRDIE pipeline four main steps: data preparation, model fitting, model diagnostics model summary. See BIRDIE: basics BIRDIE: species abundance vignettes general details BIRDIE ABU module, respectively. vignette, go different tasks performed first step ABU module: model summary. main function used summarising model fit ppl_summarise_ssm(). ppl_ function, therefore doesn’t much processing (see BIRDIE: basics confusing), call right functions work. Model predictions latent population states (abundance rates change) prepared JAGS model fitting. Therefore, task needs performed preparing predictions dataframe get ready plotting. side products produce .png images species site help model assessment. function performs tasks plotJagsSsm2ss(), found R/utils-jags.R. details function works see ?plotJagsSsm2ss. output function give us dataframe predictions estimated abundance rate change summer winter populations species. dataframe contains suitable sites (see BIRDIE ABU: data preparation) species counted . currently predicting abundance linear scale (scale data), also option produce estimates log scale. better option assess model fit.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v08-birdie-dst-data-prep.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BIRDIE DST: Data preparation","text":"species distributions module (DST) BIRDIE pipeline four main steps: data preparation, model fitting, model diagnostics model summary. See BIRDIE: basics BIRDIE: species distributions vignettes general details BIRDIE DST module, respectively. vignette, go different tasks performed first step DST module: data preparation. main function used data preparation ppl_create_site_visit(). ppl_ function, therefore doesn’t much processing (see BIRDIE: basics confusing), call right functions work. name makes reference site visit create two separate datasets ABAP data: one one entry site (pentad) visited, one one entry visit conducted (.e., pentads can visited ). fact, function create third dataset. particular year, sites visits common species, need third dataset detection information species. Data preparation three main tasks: Download ABAP data Annotate site visit data environmental covariates Format site, visit detection data just running ppl_create_site_visit() tasks performed data prepared. However, understand goes “hood”, explain tasks, conducted, . Note data preparation can time-consuming efficient prepare data multiple years . Therefore, occupancy models run one year time, data preparation done several years . number years prepared given dur argument configPipeline() function. means don’t need prepare data every time pipeline runs. example, piece code configure pipeline prepare data years 2008, 2009, 2010, set year = 2010 dur = 3. , main pipeline function ppl_run_pipe_dst1() gives us option select year want run models argument year may skip data preparation setting force_gee_dwld = FALSE, force_site_visit = FALSE, like See explanations gee site_visit mean .","code":"config <- configPipeline(year = 2010,                          dur = 3,                          occ_mod = c(\"log_dist_coast\", \"elev\"),                          det_mod = c(\"log_hours\"),                          fixed_vars = c(\"dist_coast\", \"elev\"),                          package = \"spOccupancy\",                          data_dir = \"analysis/data\",                          out_dir = \"analysis/output\",                          server = FALSE) ppl_run_pipe_dst1(sp_code = sp_code,                   year = 2008, # this is the year models will run for                   config = config,                   steps = c(\"data\"),                   force_gee_dwld = FALSE,                   monitor_gee = TRUE,                   force_site_visit = TRUE,                   force_abap_dwld = FALSE,                   spatial = FALSE,                   print_fitting = TRUE)"},{"path":"https://africabirddata.github.io/BIRDIE/articles/v08-birdie-dst-data-prep.html","id":"download-abap-data","dir":"Articles","previous_headings":"","what":"Download ABAP data","title":"BIRDIE DST: Data preparation","text":"process facilitated use ABAP R package. isn’t much say explained GitHub repository ABAP package (check ). need call functions ABAP::getAbapData() ABAP::getRegionPentads() several times data preparation process.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v08-birdie-dst-data-prep.html","id":"annotate-with-environmental-covariates","dir":"Articles","previous_headings":"","what":"Annotate with environmental covariates","title":"BIRDIE DST: Data preparation","text":"use environmental covariates model occupancy detection probabilities, requires detection/non-detection data annotated information. facilitate automation process periodic updates new data becomes available, use datasets functionality offered Google Earth Engine (GEE). functionality connect transfer data /GEE provided ABDtools R package. package basically wraps functions rgee; another package depends heavily. Therefore, requirement rgee properly installed configured able perform data-annotation tasks. Check GitHub repos rgee ABDtools. two packages installed configured, can use functionality pipeline. two functions BIRDIE used annotate ABAP data: prepGEESiteData() prepGEEVisitData(), used annotate site visit data, respectively. See ?prepGEESiteData() ?prepGEEVisitData() details. GEE related functions packaged file R/utils-gee.R Annotating different variables using GEE require different procedures. Therefore, way flexibly communicate functions variables want annotate data . Instead, hard-coded variables using BIRDIE pipeline. wanted change variables use, modify prepGEESiteData() prepGEEVisitData() functions. ideal, set currently. also keep mind pass covariates want use models configPipeline() function control script (see BIRDIE-spp-distributions). covariates must among provided prepGEESiteData() prepGEEVisitData() names. Another important thing keep mind environmental layers used don’t information past certain date. set functions way data past last date layer get annotated latest available information (last date layer). Whenever pipeline run advised review environmental layer used last date information available , update functions necessary. now brings us next part data preparation, formatting site, visit detection data.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v08-birdie-dst-data-prep.html","id":"format-site-visit-and-detection-data","dir":"Articles","previous_headings":"","what":"Format site, visit and detection data","title":"BIRDIE DST: Data preparation","text":"last step data preparation, need take data coming GEE reformat occupancy modelling. Note stage data formatted particular package, just take good starting point used occupancy modelling. function use createOccuData(). , create site visit data frames covariates specified configPipeline(). Data coming GEE wide format, meaning variable year separate column. general, like variables one column years another column. one important tasks createOccuData() us. also use function create transformations variables coming GEE (e.g. sometimes use log transformations) interactions. createOccuData() also hard-coded, decide use new variable transformation, need modify function create explicitly. Interactions handled correctly long variables involved interaction present data.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v09-birdie-dst-model-fitting.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BIRDIE DST: Model fitting","text":"species distributions module (DST) BIRDIE pipeline four main steps: data preparation, model fitting, model diagnostics model summary. See BIRDIE: basics BIRDIE: species distributions vignettes general details BIRDIE DST module, respectively. vignette, go different tasks performed step DST module: model fitting. main function used model fitting ppl_fit_occu_model(). ppl_ function, therefore doesn’t much processing (see BIRDIE: basics confusing), call right functions work. output ppl_fit_occu_model() always model fit change depending package selected configPipeline() function. Currently, two options spOccupancy (preferred) occuR (maintained, probably working). following section, explain process fitting model using spOccupancy.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v09-birdie-dst-model-fitting.html","id":"fitting-a-model-using-the-spoccupancy-package","dir":"Articles","previous_headings":"","what":"Fitting a model using the spOccupancy package","title":"BIRDIE DST: Model fitting","text":"main function used fitting occupancy models using spOccupancy package fitSpOccu(), found R/utils-spOccupancy.R file. spOccupancy package gives us option fit single season multi-season occupancy models. currently fitting single season models, quite lot data single season therefore multi-season models demand large amounts computing resources. Although think setting analyses high-performance computing facility, like keep hardware requirements reasonable levels institution able run pipeline. addition, plan update pipeline yearly therefore seems reasonable run single season models new data. also option run models without spatial random effects. currently running models without spatial effects. using around 10 environmental covariates models diagnostics indicate necessary. pipeline accommodate spatial models code structure implement . However, require work finalise code. fitSpOccu() function helpers (also found R/utils-spOccupancy.R) performs several tasks: Format site visit data fit spOccupancy package. function prepSpOccuData_single() moment, running single-season models. homologous prepSpOccuData_multi() multi-season models, probably needs edits work. functions basically wrappers around ABAP::abapToSpOcc_single() ABAP::abapToSpOcc_multi(). Define priors initial values. species don’t models fit, use default priors spOccupancy (see ?spOccupancy::PGOcc details). However, model fits previous years, center priors previous parameter estimate (exists - might fitted different model - later) use standard deviation estimate plus one, unless larger spOccupancy default (~ sqrt(2.5)), case use latter. important function defineSpOccuPriors() (R/utils-spOccupancy.R). Run model. fit model using spOccupancy::PGOcc() since currently using spatial effects. , use spOccupancy::spPGOcc(). Finally, add information priors covariate scales model fit used operations later.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v09-birdie-dst-model-fitting.html","id":"different-models-for-different-species-and-years","dir":"Articles","previous_headings":"","what":"Different models for different species and years","title":"BIRDIE DST: Model fitting","text":"might case first model try converge fit data well (see vignette diagnostics). moment writing defined two models: one random effects observer, one random effects observers sites detection probabilities. idea , first try simplest model issues gradually increase complexity. two models work fine now, future might want implement others. procedure run multiple models moment manual. define models want try control script (see BIRDIE: species distributions vignette), run pipeline species given year first model, run diagnostics, select problem species, run pipeline problem species second model. process can surely automated, functionality still needs developed.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v10-birdie-dst-diagnostics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BIRDIE DST: Model diagnostics","text":"species distributions module (DST) BIRDIE pipeline four main steps: data preparation, model fitting, model diagnostics model summary. See BIRDIE: basics BIRDIE: species distributions vignettes general details BIRDIE DST module, respectively. vignette, go different tasks performed step DST module: model diagnostics. main function used model diagnosis ppl_diagnose_occu(). ppl_ function, therefore doesn’t much processing (see BIRDIE: basics confusing), call right functions work. diagnostics step look two indicators: Gelman-Rubin convergence diagnostic (\\(\\hat{R}\\)) goodness--fit Bayesian p-value. first diagnostic computed function diagnoseRhatSpOccu() second one function diagnoseGofSpOccu() (functions found R/utils-spOccupancy.R). ppl_diagnose_occu() combines output two functions single table stored analysis/output/sp_code/occu_diagnostics_spOccupancy_YYYY_sp_code.csv, YYYY year data fitting model sp_code species code. way, easy extract diagnostic files different directories, combine table quickly explore potential issues.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v10-birdie-dst-diagnostics.html","id":"diagnosing-convergence","dir":"Articles","previous_headings":"","what":"Diagnosing convergence","title":"BIRDIE DST: Model diagnostics","text":"function diagnoseRhatSpOccu() extracts \\(\\hat{R}\\) values computed spOccupancy estimated parameters tabulates . table, parameter appears one column gets 0 \\(|1 - \\hat{R}| < 0.1\\) 1 otherwise. extra columns added, number non-convergent parameters, number detections observed, number sites visited, etc.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v10-birdie-dst-diagnostics.html","id":"diagnosing-goodness-of-fit","dir":"Articles","previous_headings":"","what":"Diagnosing goodness-of-fit","title":"BIRDIE DST: Model diagnostics","text":"function diagnoseGofSpOccu() conducts posterior predictive checks (PPC) calculates Bayesian p-value. function modification spOccupancy::ppcOcc() making slightly efficient use RAM memory, expense adding dependencies (BIRDIE already depended anyway, notably dplyr). procedure estimate Bayesian p-value used spOccupancy::ppcOcc(). However diagnoseGofSpOccu() conducts chi-squared test moment, aggregates data per site per visit. spOccupancy::ppcOcc() one can aggregate data per site visit conduct Freeman-Tuckey Chi-squared tests. procedure consists simulating number detection/non-detection data sets posterior distribution comparing number simulated detections, number detections actually observed data (see Doser et al. 2022 references therein). visit results either detection non-detection, really compare number detections site (.e., aggregate detections site). make comparison first calculate Chi-squared statistic data, Monte Carlo Markov Chain (MCMC) iteration \\(\\) \\[\\chi_{obs}^{2()} = \\sum_{y=1}^N\\frac{(\\textrm{Observed}_y - \\textrm{Expected}_y^{()})^2}{\\textrm{Expected}_y^{()}}\\] \\(\\textrm{Observed}_y\\) number detections observed site \\(y\\) \\(\\textrm{Expected}_y^{()}\\) expected number detections estimated site \\(y\\) MCMC iteration \\(\\). thing simulated data sets. data set simulated MCMC iteration \\(\\) compute \\[\\chi_{sim}^{2()} = \\sum_{y=1}^N\\frac{(\\textrm{sim}_y^{()} - \\textrm{Expected}_y^{()})^2}{\\textrm{Expected}_y^{()}}\\] Bayesian p-value computed proportion \\(\\chi_{sim}^{2} > \\chi_{obs}^{2}\\).","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v10-birdie-dst-diagnostics.html","id":"shiny-apps","dir":"Articles","previous_headings":"","what":"Shiny apps","title":"BIRDIE DST: Model diagnostics","text":"developed Shiny app allows us extract diagnostics species year explore interactive way. app still experimental can found analysis/tools/diagnose_dst","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v11-birdie-dst-model-summary.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BIRDIE DST: Model summary","text":"species distributions module (DST) BIRDIE pipeline four main steps: data preparation, model fitting, model diagnostics model summary. See BIRDIE: basics BIRDIE: species distributions vignettes general details BIRDIE DST module, respectively. vignette, go different tasks performed step DST module: model summary. main function used summarising model fit ppl_summarise_occu(). ppl_ function, therefore doesn’t much processing (see BIRDIE: basics confusing), call right functions work. step relatively simple. need conduct two tasks: predict occurrence detection probabilities pentads South Africa fitted model summarise predictions.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v11-birdie-dst-model-summary.html","id":"predicting-from-a-model-fit","dir":"Articles","previous_headings":"","what":"Predicting from a model fit","title":"BIRDIE DST: Model summary","text":"predictSpOccu() used predicting model fit basically wrapper around spOccupancy::predict.PGOcc(). However, data preparation steps make sure data pass predict function variables scale data used fitting model. Model fitted using pentads visited given year, want predict pentads South Africa. maintain scale, make use covariate scale information stored model fit object (see BIRDIE DST: model fitting vignette). output predictSpOccu() list two elements containing posterior predictive samples \\(\\psi\\) (psi, probability occurrence) \\(p\\) (probability detection) pentad.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/articles/v11-birdie-dst-model-summary.html","id":"summarising-predictions","dir":"Articles","previous_headings":"","what":"Summarising predictions","title":"BIRDIE DST: Model summary","text":"step, use function summariseSpOccu() extract 0.025, 0.5 0.975 quantiles predictive samples \\(\\psi\\) \\(p\\) obtained predictSpOccu(). store quantiles display BIRDIE website rather posterior predictive samples. also compute realized occupancy posterior predictive samples data. realized occupancy probability occurrence conditional observed data, \\[P[occu | obs = 1] = 1\\] \\[P[occu | obs = 0] = \\frac{\\psi q}{(1 - \\psi + \\psi q)}\\] \\(obs = 1\\) species detected site visit, \\(obs = 0\\) species detected site visit, \\(\\psi\\) probability occurrence estimated model \\(q = \\prod_{=1}^N (1 - p_i)\\), \\(p_i\\) probability detection visit \\(\\) \\(N\\) total number visits given site. summaries stored file called analysis/output/occu_pred_spOccupancy_YYYY_sp_code.csv, YYYY year data fitting model sp_code species code. files exported database storage display BIRDIE website. model fitted lack enough data, , use raw data create prediction file mentioned file still exact structure, now \\(\\psi\\) \\(p\\) NA pentads (calculated). Raw data treated realized occupancy confidence limits estimated. function performs tasks createPredFromAbap().","code":""},{"path":"https://africabirddata.github.io/BIRDIE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"BIRDIE Development Team. Author, maintainer.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"BIRDIE Development Team (2023). BIRDIE: South African Biodiversity Data Pipeline Wetlands Waterbirds. R package version 0.0.0.9000, https://africabirddata.github.io/BIRDIE/.","code":"@Manual{,   title = {BIRDIE: South African Biodiversity Data Pipeline for Wetlands and Waterbirds},   author = {{BIRDIE Development Team}},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://africabirddata.github.io/BIRDIE/}, }"},{"path":"https://africabirddata.github.io/BIRDIE/index.html","id":"birdie","dir":"","previous_headings":"","what":"South African Biodiversity Data Pipeline for Wetlands and Waterbirds","title":"South African Biodiversity Data Pipeline for Wetlands and Waterbirds","text":"repository contains code documentation related South Africa Biodiversity Data Pipeline Wetlands Waterbirds (BIRDIE) project: https://jrsbiodiversity.org/grants/sanbi-2020/","code":""},{"path":"https://africabirddata.github.io/BIRDIE/index.html","id":"basic-structure","dir":"","previous_headings":"","what":"Basic structure","title":"South African Biodiversity Data Pipeline for Wetlands and Waterbirds","text":"two basic elements BIRDIE repo: ) package contains functions data installed extension base R ii) analysis folder contains analysis scripts data runs R integrated R. words, package adds functionality analysis uses functionality. means use pipeline don’t install package, also need clone repository. Inside package vignettes explain run different modules pipeline.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/index.html","id":"instructions-to-clone-and-install-package","dir":"","previous_headings":"","what":"INSTRUCTIONS TO CLONE AND INSTALL PACKAGE","title":"South African Biodiversity Data Pipeline for Wetlands and Waterbirds","text":"RStudio, create new project ‘Create project’ menu, select ‘Version Control’/‘Git’ Copy repository URL (click ‘Code’ green button copy link) Choose appropiate directory ‘Create project’ Install package ‘devtools’ case don´t run devtools::install(build_vignettes = TRUE) project directory Remember pull latest version regularly","code":""},{"path":"https://africabirddata.github.io/BIRDIE/index.html","id":"instructions-to-contribute-code-to-the-package","dir":"","previous_headings":"","what":"INSTRUCTIONS TO CONTRIBUTE CODE TO THE PACKAGE","title":"South African Biodiversity Data Pipeline for Wetlands and Waterbirds","text":"site owners: danger multiple people working simultaneously project code. make changes locally computer , push changes, others push , might conflicts. HEAD pointer main branch moved since started working. deal lurking issues, suggest opening working topic branch. just regular branch short lifespan. steps: Open branch local machine Push remote repo Make changes local machine Commit push remote GitHub repo now see option notifies changes branch: click compare pull request. conflicts ‘merge pull request’ local machine, change master branch. Either use Git GUI (go branches/delete/select branch/push). use console typing ‘git branch -d your_branch_name’. Opening branches quick easy, harm opening multiple branches day. However, important merge delete often keep things tidy. Git provides functionality deal conflicting branches. branches : https://git-scm.com/book/en/v2/Git-Branching-Branches---Nutshell Another idea use ‘issues’ tab find project header. , can identify issues package, assign tasks warn contributors working code.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/addDuToitCounts.html","id":null,"dir":"Reference","previous_headings":"","what":"Add DuToit's Pan data from Doug — addDuToitCounts","title":"Add DuToit's Pan data from Doug — addDuToitCounts","text":"function used attach data DuToit's Pan Doug Harebottle provided CWAC database.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/addDuToitCounts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add DuToit's Pan data from Doug — addDuToitCounts","text":"","code":"addDuToitCounts(counts, config)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/addDuToitCounts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add DuToit's Pan data from Doug — addDuToitCounts","text":"counts dataframe CWAC data coming getCwacSppCounts SAFRING reference number species want add data . config list pipeline configuration parameters. See configPipeline.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/addDuToitCounts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add DuToit's Pan data from Doug — addDuToitCounts","text":"dataframe DuToit's counts added counts","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/addDuToitCounts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add DuToit's Pan data from Doug — addDuToitCounts","text":"","code":"if (FALSE) { config <- configPipeline(     year = 2021,     dur = 29,     mod_file = \"cwac_ssm_two_season_mean_rev.R\",     package = \"jagsUI\",     data_dir = NULL,     out_dir = NULL,     server = FALSE )  site_code <- 28462448  counts <- CWAC::getCwacSiteCounts(site_code)  complete_counts <- addDuToitCounts(counts, config)   }"},{"path":"https://africabirddata.github.io/BIRDIE/reference/addExtraSitesToSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Add raw counts to CWAC SSM predictions — addExtraSitesToSummary","title":"Add raw counts to CWAC SSM predictions — addExtraSitesToSummary","text":"run state-space models CWAC sites enough data. See ppl_create_data_ssm. sites enough data, present raw data. function used bind output ppl_summarise_ssm raw data sites enough data run analysis.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/addExtraSitesToSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add raw counts to CWAC SSM predictions — addExtraSitesToSummary","text":"","code":"addExtraSitesToSummary(counts, preds)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/addExtraSitesToSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add raw counts to CWAC SSM predictions — addExtraSitesToSummary","text":"counts dataframe CWAC counts. preferable dataframe containd missing counts well. See addMissingCwacCounts preds dataframe estimates state-space model fitted CWAC data. See ppl_summarise_ssm","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/addExtraSitesToSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add raw counts to CWAC SSM predictions — addExtraSitesToSummary","text":"dataframe predictions sites good data, together raw counts sites enough data run analysis.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/addExtraSitesToSummary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add raw counts to CWAC SSM predictions — addExtraSitesToSummary","text":"","code":"if (FALSE) { sp_code <- 87 config <- configPipeline(     year = 2022,     dur = 30,     module = \"abu\",     mod_file = \"cwac_ssm_two_season_mean_rev_jump.R\",     package = \"jagsUI\",     data_dir = NULL,     # this might have to be adapted?     out_dir = NULL,     # this might have to be adapted?     server = FALSE ) counts <- read.csv(setSpOutFilePath(\"cwac_data_w_miss\", config, config$years_ch, sp_code, \".csv\")) preds <- setSpOutFilePath(\"ssm_pred\", config, config$years_ch, sp_code, \"_all.csv\") preds_w_raw <- addExtraSitesToSummary(counts, preds) }"},{"path":"https://africabirddata.github.io/BIRDIE/reference/addSiteVarEETimeLimit.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotate site data with Google Earth Engine with a time limit — addSiteVarEETimeLimit","title":"Annotate site data with Google Earth Engine with a time limit — addSiteVarEETimeLimit","text":"Annotate site data Google Earth Engine time limit","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/addSiteVarEETimeLimit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotate site data with Google Earth Engine with a time limit — addSiteVarEETimeLimit","text":"","code":"addSiteVarEETimeLimit(   ee_feats,   ee_collection,   band,   last_year,   reducer,   unmask,   monitor,   config )"},{"path":"https://africabirddata.github.io/BIRDIE/reference/addSiteVarEETimeLimit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotate site data with Google Earth Engine with a time limit — addSiteVarEETimeLimit","text":"ee_feats feature collection sites want annotate. uploaded sf object sites GEE, previously. See uploadFeaturesToEE ee_collection GEE collection produced ee$ImageCollection(). See GEE catalog. band band collection going use annotate data last_year last year provided GEE image collection reducer reducer use summarize images image collection unmask GEE masks missing values, means used computing means, counts, etc. Sometimes might want avoid behaviour use 0 instead NA. , set unmask TRUE. monitor Logical. TRUE (default) monitoring messages produced rgee displayed. FALSE, high-level messages displayed. config list pipeline configuration parameters. See configPipeline","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/addSiteVarEETimeLimit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Annotate site data with Google Earth Engine with a time limit — addSiteVarEETimeLimit","text":"function annotates data corresponding year present GEE image collection. Years last year present 'config$years' annotated last year present image collection.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/addSpOccDetCovt.html","id":null,"dir":"Reference","previous_headings":"","what":"Add detection covariate to spOccupancy data list — addSpOccDetCovt","title":"Add detection covariate to spOccupancy data list — addSpOccDetCovt","text":"Add detection covariate spOccupancy data list","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/addSpOccDetCovt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add detection covariate to spOccupancy data list — addSpOccDetCovt","text":"","code":"addSpOccDetCovt(spOcc_data, covt_data, seasons = NULL)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/addSpOccDetCovt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add detection covariate to spOccupancy data list — addSpOccDetCovt","text":"spOcc_data spOccupancy data list covt_data data frame ABAP visits used create spOcc_data. data frame must contain columns 'Pentad', 'StartDate' covariate want add spOcc_data. data multi-season, also need variable identifies season. one covariate time allowed moment. seasons name variable used identify seasons multi-season data sets. Defaults NULL.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/addSpOccDetCovt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add detection covariate to spOccupancy data list — addSpOccDetCovt","text":"spOccupancy data list additional detection covariate.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/barberspan.html","id":null,"dir":"Reference","previous_headings":"","what":"Barberspan CWAC data — barberspan","title":"Barberspan CWAC data — barberspan","text":"dataset containing counts recorded Barberspan CWAC project","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/barberspan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Barberspan CWAC data — barberspan","text":"","code":"barberspan"},{"path":"https://africabirddata.github.io/BIRDIE/reference/barberspan.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Barberspan CWAC data — barberspan","text":"data frame 1579 rows 34 variables: Breeding_code Breeding code. Card Card code. Common_group Taxonomic group. Common_species Taxonomic species. Compiler Compiler information. Count Number birds counted. CountCondition Count condition. CountType Count type. Count_id Count ID. Country Country information. Family Taxonomic family. Genus Taxonomic genus. ID ID information. LocationCode Location code. LocationName Location name. NoCount count information. Notes Additional notes. Odr Odr information. OpenWater Open water habitat. Pairs Number pairs recorded. Province Province information. Season Season information. Shoreline Shoreline habitat. Species Species information. SppRef Species code. StartDate Start date count. Survey_notes Survey notes. TimeEnd End time count. TimeStart Start time count. TotalCount Total count. TotalSpecies Total species recorded. WetIntCode Wetland International code. WetlandCondition Wetland condition information. WetlandThreat Wetland threat information. X X-coordinate. Y Y-coordinate. Year Year count. record_status Record status.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/combineAbuDiags.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine species abundance diagnostics into a single object — combineAbuDiags","title":"Combine species abundance diagnostics into a single object — combineAbuDiags","text":"data pipeline produces one abundance model diagnostic file species year. function reads diagnostics files combines single object","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/combineAbuDiags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine species abundance diagnostics into a single object — combineAbuDiags","text":"","code":"combineAbuDiags(config, sp_codes, year)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/combineAbuDiags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine species abundance diagnostics into a single object — combineAbuDiags","text":"config list pipeline configuration parameters. See configPipeline. sp_codes SAFRING reference numbers species want diagnostics . year year(s) diagnostics required. Years formated two last digits beginning last years. See","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/combineAbuDiags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine species abundance diagnostics into a single object — combineAbuDiags","text":"dataframe diagnostic paramters","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/combineAbuDiags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine species abundance diagnostics into a single object — combineAbuDiags","text":"","code":"if (FALSE) { config <- configPipeline(     year = 2021,     dur = 29,     mod_file = \"cwac_ssm_two_season_mean_rev.R\",     package = \"jagsUI\",     data_dir = NULL,     out_dir = NULL,     server = FALSE ) sp_codes <- config$species  combineAbuDiags(config, sp_codes, \"93_21\") }"},{"path":"https://africabirddata.github.io/BIRDIE/reference/combineOccuDiags.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine species occupancy diagnostics into a single object — combineOccuDiags","title":"Combine species occupancy diagnostics into a single object — combineOccuDiags","text":"datapipeline produces one occupancy diagnostic file species year. function reads diagnostics files combines single object","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/combineOccuDiags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine species occupancy diagnostics into a single object — combineOccuDiags","text":"","code":"combineOccuDiags(config, sp_codes, year)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/combineOccuDiags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine species occupancy diagnostics into a single object — combineOccuDiags","text":"config list pipeline configuration parameters. See configPipeline. sp_codes SAFRING reference numbers species want diagnostics . year year diagnostics required.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/combineOccuDiags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine species occupancy diagnostics into a single object — combineOccuDiags","text":"dataframe diagnostic paramters","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/combineOccuDiags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine species occupancy diagnostics into a single object — combineOccuDiags","text":"","code":"if (FALSE) { config <- configPipeline(year = 2010,                          dur = 3,                          occ_mod = c(\"log_dist_coast\", \"elev\", \"log_hum.km2\", \"wetcon\",                                      \"watrec\", \"watext\", \"log_watext\", \"watext:watrec\",                                      \"ndvi\", \"prcp\", \"tdiff\"),                          det_mod = c(\"(1|obs_id)\", \"log_hours\", \"prcp\", \"tdiff\", \"cwac\"),                          fixed_vars = c(\"Pentad\", \"lon\", \"lat\", \"watocc_ever\", \"wetext_2018\",\"wetcon_2018\",                                         \"dist_coast\", \"elev\"),                          package = \"spOccupancy\",                          data_dir = \"analysis/hpc/imports\",                          out_dir = \"analysis/hpc/imports\",                          server = TRUE) sp_codes <- config$species  combineOccuDiags(config, sp_codes, 2008) }"},{"path":"https://africabirddata.github.io/BIRDIE/reference/configPipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Configure pipeline parameters — configPipeline","title":"Configure pipeline parameters — configPipeline","text":"Set basic variables run BIRDIE pipeline locally remotely.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/configPipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Configure pipeline parameters — configPipeline","text":"","code":"configPipeline(   year,   dur,   region = c(\"southafrica\", \"kenya\"),   module = c(\"dst\", \"abu\"),   occ_mod = NULL,   det_mod = NULL,   fixed_vars = NULL,   mod_file = NULL,   server = FALSE,   data_dir = NULL,   mod_dir = NULL,   out_dir = NULL,   package = NULL )"},{"path":"https://africabirddata.github.io/BIRDIE/reference/configPipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Configure pipeline parameters — configPipeline","text":"year Year interest. dur Temporal coverage analysis years. year last year covered analysis. region character string region want run pipeline . Currently \"South Africa\" \"Kenya\" supported. module character string defining module pipeline run. moment can one c(\"dst\", \"abu\") distributions abundance respectively. occ_mod character vector names variables include occupancy process occupancy model. Random effects interactions specified lmer. Note second order interactions accepted moment (.e., interactions two variables). det_mod character vector names variables include detection process occupancy model. Random effects interactions specified lmer. Note second order interactions accepted moment. (.e., interactions two variables). fixed_vars character vector names variables included occupancy model change time. mod_file Name file containing model, path directory. Directory specified mod_dir. typically used JAGS Stan models written external file. server Logical. TRUE preamble prepared run remotely, otherwise prepared run locally. data_dir Path data directory. inputs pipeline generate , environmental layers Google Earth Engine. stored . mod_dir Path directory models saved. out_dir Path output directory. Pipeline outputs stored , including intermediate outputs, need . package character string name package used fitting occupancy state-space models.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/configPipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Configure pipeline parameters — configPipeline","text":"list parameters passed functions pipeline.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/configPipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Configure pipeline parameters — configPipeline","text":"","code":"config <- configPipeline(     year = 2021,     dur = 29,     mod_file = \"cwac_ssm_two_season_mean_rev.R\",     package = \"jagsUI\",     data_dir = NULL,     out_dir = NULL,     server = FALSE     )"},{"path":"https://africabirddata.github.io/BIRDIE/reference/createCombinedExportFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a combined file for export to data mart — createCombinedExportFile","title":"Create a combined file for export to data mart — createCombinedExportFile","text":"Create combined file export data mart","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/createCombinedExportFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a combined file for export to data mart — createCombinedExportFile","text":"","code":"createCombinedExportFile(config, type = c(\"abu\", \"dst\"))"},{"path":"https://africabirddata.github.io/BIRDIE/reference/createCombinedExportFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a combined file for export to data mart — createCombinedExportFile","text":"config list pipeline configuration parameters. See configPipeline type character string three options: \"abu\", abundance estimates files, \"dst\" occupancy estimates files.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/createCombinedExportFile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a combined file for export to data mart — createCombinedExportFile","text":"create file config$out_dir/exports combining files selected type species years config$years.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/createLog.html","id":null,"dir":"Reference","previous_headings":"","what":"Create pipeline event log — createLog","title":"Create pipeline event log — createLog","text":"function create customized log entry log file records activity pipeline. precisely, record time, species outcome data preparation, model fitting, diagnostics preparation.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/createLog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create pipeline event log — createLog","text":"","code":"createLog(   config,   log_file = NULL,   date_time = NULL,   species = NULL,   model = NULL,   year = NA,   data = NA,   fit = NA,   diagnose = NA,   summary = NA,   package = NA,   notes = \"\",   full_log = NULL )"},{"path":"https://africabirddata.github.io/BIRDIE/reference/createLog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create pipeline event log — createLog","text":"config list pipeline configuration parameters. See configPipeline configPipeline. log_file Optional. character string path file updated. NULL (default) new log file created. date_time Optional. character string log date. NULL (default) time given Sys.time, formatted SAST used. species SAFRING code species log corresponds . model Type model processed. Either \"occ\" \"ssm\". year Year model fit . data Data preparation status. Defaults NA. fit model fitting status. Defaults NA. diagnose Model diagnostics status. Defaults NA. summary Model summary status. Defaults NA. package character string name package used fit models. Currently, spOccupancy occupancy jagsUI state-space modelling supported. maintained. notes additional comments. Defaults NA. full_log Optionally, can pass full vector log, elements. case, arguments config logfile ignored.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/createLog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create pipeline event log — createLog","text":".csv saved reports directory. location directory configured configuration object passed config config$output_dir.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/createOccuData.html","id":null,"dir":"Reference","previous_headings":"","what":"Create data for fitting an occupancy model — createOccuData","title":"Create data for fitting an occupancy model — createOccuData","text":"function takes generic occupancy site data , optionally, visit data without species observations, adds detection data species given year, runs checks formats output.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/createOccuData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create data for fitting an occupancy model — createOccuData","text":"","code":"createOccuData(config, sp_code, years, site_data, visit_data = NULL)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/createOccuData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create data for fitting an occupancy model — createOccuData","text":"config list configuration parameters see configPipeline sp_code SAFRING_No species interest extracted ABAP. Ignored download set FALSE. years numeric vector elements corresponding years want data . Ignored download set FALSE. site_data dataframe occupancy site data. visit_data Optional. dataframe occupancy visit data.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/createOccuData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create data for fitting an occupancy model — createOccuData","text":"list containing two data frames: one site data one visit data, visit data provided. second element NULL visit data provided. Note visit_data provided sites without visits removed - .e., site visit data frames set sites.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/createPredFromAbap.html","id":null,"dir":"Reference","previous_headings":"","what":"Create prediction object directly from ABAP data — createPredFromAbap","title":"Create prediction object directly from ABAP data — createPredFromAbap","text":"function used possible run occupancy model species year. , raw data presented must structure prediction object able integrate database.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/createPredFromAbap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create prediction object directly from ABAP data — createPredFromAbap","text":"","code":"createPredFromAbap(sp_code, year_sel, config)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/createPredFromAbap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create prediction object directly from ABAP data — createPredFromAbap","text":"sp_code SAFRING code species run pipeline year_sel Year data run model . config list pipeline configuration parameters. See configPipeline","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseGofJagsSsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnose goodness-of-fit for JAGS state-space model — diagnoseGofJagsSsm","title":"Diagnose goodness-of-fit for JAGS state-space model — diagnoseGofJagsSsm","text":"function runs basic posterior predictive checks JAGS SSM","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseGofJagsSsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnose goodness-of-fit for JAGS state-space model — diagnoseGofJagsSsm","text":"","code":"diagnoseGofJagsSsm(fit, counts, linear = TRUE)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseGofJagsSsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnose goodness-of-fit for JAGS state-space model — diagnoseGofJagsSsm","text":"fit JAGS state-space model fitted CWAC data counts dataframe CWAC counts ready model fit. See ppl_create_data_ssm linear Logical. TRUE (default) posterior predictive checks made data scale, otherwise done model (log) scale.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseGofJagsSsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnose goodness-of-fit for JAGS state-space model — diagnoseGofJagsSsm","text":"data frame Rhat values different parameters estimated model.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseGofSpOccu.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct goodness-of-fit test for spOccupancy models — diagnoseGofSpOccu","title":"Conduct goodness-of-fit test for spOccupancy models — diagnoseGofSpOccu","text":"function comes largely ppcOcc.R spOccupancy package","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseGofSpOccu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct goodness-of-fit test for spOccupancy models — diagnoseGofSpOccu","text":"","code":"diagnoseGofSpOccu(object, post_sims, fit_stat = \"chi-squared\", group = 1)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseGofSpOccu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct goodness-of-fit test for spOccupancy models — diagnoseGofSpOccu","text":"object spOccupancy fit post_sims list posterior simulations obtained simDetSpOccu(). fit_stat Goodness fit statistic compute. Currently Chi-squared supported. group Whether GOF statistic computed sites (1) visits (2). Currently, grouping site supported","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseGofSpOccu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct goodness-of-fit test for spOccupancy models — diagnoseGofSpOccu","text":"list GOF statistics computed observed data simulated data. One statistic computed MCMC iteration. function create list several objects. important : fit.y: MCMC sample, chi-squared statistic total number detections sites data wrt expected model expectation fit.y.rep: MCMC sample, chi-squared statistic total number detections sites simulated data wrt expected model expectation fit.y.group.quants: site, chi-squared statistic total number detections data wrt expected model expectation (posterior distribution quantiles) fit.y.rep.group.quants: site, chi-squared statistic total number detections simulated data wrt expected model expectation (posterior distribution quantiles) y.summ.per.site: Data frame number detections per site obtained data simulated posterior distribution. Also observed number detections data.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseRhatJagsSsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnose convergence for JAGS state-space model — diagnoseRhatJagsSsm","title":"Diagnose convergence for JAGS state-space model — diagnoseRhatJagsSsm","text":"function runs basic Rhat checks JAGS SSM","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseRhatJagsSsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnose convergence for JAGS state-space model — diagnoseRhatJagsSsm","text":"","code":"diagnoseRhatJagsSsm(fit, sp_code, config)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseRhatJagsSsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnose convergence for JAGS state-space model — diagnoseRhatJagsSsm","text":"fit JAGS state-space model fitted CWAC data sp_code SAFRING reference number species want analyse. config list pipeline configuration parameters. See configPipeline","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseRhatJagsSsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnose convergence for JAGS state-space model — diagnoseRhatJagsSsm","text":"data frame Rhat values different parameters estimated model.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseRhatSpOccu.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnose convergence for spOccupancy model — diagnoseRhatSpOccu","title":"Diagnose convergence for spOccupancy model — diagnoseRhatSpOccu","text":"function runs basic Rhat checks spOccupancy model","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseRhatSpOccu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnose convergence for spOccupancy model — diagnoseRhatSpOccu","text":"","code":"diagnoseRhatSpOccu(fit, sp_code, year)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseRhatSpOccu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnose convergence for spOccupancy model — diagnoseRhatSpOccu","text":"fit spOccupancy model fit ABAP data. sp_code SAFRING reference number species want analyse. year year pipeline run ","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/diagnoseRhatSpOccu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnose convergence for spOccupancy model — diagnoseRhatSpOccu","text":"data frame Rhat values different parameters estimated model.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/fitSpOccu.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit spOccupancy model — fitSpOccu","title":"Fit spOccupancy model — fitSpOccu","text":"Fit spOccupancy model","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/fitSpOccu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit spOccupancy model — fitSpOccu","text":"","code":"fitSpOccu(   site_data_year,   visit_data_year,   config,   sp_code,   spatial = FALSE,   sp_sites,   ... )"},{"path":"https://africabirddata.github.io/BIRDIE/reference/fitSpOccu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit spOccupancy model — fitSpOccu","text":"site_data_year Occupancy site data single year species (see ppl_create_site_visit) visit_data_year Occupancy visit data single year species (see ppl_create_site_visit) config list pipeline configuration parameters (see configPipeline). sp_code SAFRING code species pipeline running spatial Logical, indicating whether spatial random effects included model (TRUE) (FALSE, default) sp_sites Spatial object containing pentads site_data_year. ... arguments might needed (e.g. messages)","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/fitSpOccu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit spOccupancy model — fitSpOccu","text":"Either spOccupancy model fit integer 3, indicating model fit failed.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/gatherYearFromVars.html","id":null,"dir":"Reference","previous_headings":"","what":"Gather years from variables with year — gatherYearFromVars","title":"Gather years from variables with year — gatherYearFromVars","text":"Gather years variables year","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/gatherYearFromVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gather years from variables with year — gatherYearFromVars","text":"","code":"gatherYearFromVars(x, vars, sep)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/gatherYearFromVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gather years from variables with year — gatherYearFromVars","text":"x dataframe columns represent variable given year. Note must unique key identifies case uniquely. vars Variables separate variable year (different columns). sep character identifies separator name variable year.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/gatherYearFromVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gather years from variables with year — gatherYearFromVars","text":"dataframe separate columns variables years. column represents year several columns represent variables measured across years.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/gatherYearFromVars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gather years from variables with year — gatherYearFromVars","text":"","code":"df <- data.frame(id = 1:10,                  v1_2010 = rnorm(10, 0, 1),                  v1_2011 = rnorm(10, 100, 10),                  v2_2010 = runif(10, 0, 1),                  v2_2011 = runif(10, 100, 110))  gatherYearFromVars(x = df, vars = names(df)[-1], sep = \"_\") #> # A tibble: 20 × 4 #>       id  year      v1       v2 #>    <int> <int>   <dbl>    <dbl> #>  1     1  2010   0.123   0.0118 #>  2     1  2011  91.8   103.     #>  3     2  2010   1.41    0.757  #>  4     2  2011 127.    104.     #>  5     3  2010  -0.610   0.926  #>  6     3  2011 116.    101.     #>  7     4  2010  -0.234   0.441  #>  8     4  2011 105.    104.     #>  9     5  2010   0.154   0.943  #> 10     5  2011  95.5   102.     #> 11     6  2010  -0.170   0.203  #> 12     6  2011  87.9   105.     #> 13     7  2010   1.19    0.954  #> 14     7  2011 129.    105.     #> 15     8  2010   0.474   0.0341 #> 16     8  2011 116.    110.     #> 17     9  2010   0.987   0.206  #> 18     9  2011  97.4   108.     #> 19    10  2010  -0.423   0.925  #> 20    10  2011 100.    104."},{"path":"https://africabirddata.github.io/BIRDIE/reference/logFitStatus.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate fit status messages — logFitStatus","title":"Generate fit status messages — logFitStatus","text":"Generate fit status messages","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/logFitStatus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate fit status messages — logFitStatus","text":"","code":"logFitStatus(.fit_out, .year, .sp_code, .config)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/logFitStatus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate fit status messages — logFitStatus","text":".fit_out Fit status object generated ppl_fit_occu_model .year Year run pipeline .sp_code Species SAFRING code .config Config object configPipeline","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://africabirddata.github.io/BIRDIE/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/pipe_prll_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit occupancy models in parallel — pipe_prll_fit","title":"Fit occupancy models in parallel — pipe_prll_fit","text":"Wrapper around ppl_run_pipe_dst1 (fit step) furrr parallel calls","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/pipe_prll_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit occupancy models in parallel — pipe_prll_fit","text":"","code":"pipe_prll_fit(   .sp_code,   .year,   .spatial = FALSE,   .config,   .steps = c(\"fit\", \"diagnose\"),   time_limit = NULL )"},{"path":"https://africabirddata.github.io/BIRDIE/reference/pipe_prll_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit occupancy models in parallel — pipe_prll_fit","text":".sp_code Species SAFRING code .year Year run pipeline .spatial Whether spatial model fit. Defaults FALSE. .config Config object configPipeline .steps Character vector steps pipeline run. Typically c(\"fit\", \"diagnose\"). However, aware \"diagnose\" uses lot RAM. time_limit Computation time limit core seconds.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/plotDetections.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot detection from occupancy data — plotDetections","title":"Plot detection from occupancy data — plotDetections","text":"Plot detection occupancy data","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/plotDetections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot detection from occupancy data — plotDetections","text":"","code":"plotDetections(site_data, visit_data)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/plotDetections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot detection from occupancy data — plotDetections","text":"site_data sf object sites visited given period. visit_data data frame visits occurred given period. visit_data must name site_data sites variable must called 'site'. Detections must represented variable named 'obs', 1 species detected 0 otherwise.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/plotJagsSsm2ss.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot state series of a JAGS state-space model with two seasons — plotJagsSsm2ss","title":"Plot state series of a JAGS state-space model with two seasons — plotJagsSsm2ss","text":"Plot state series JAGS state-space model two seasons","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/plotJagsSsm2ss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot state series of a JAGS state-space model with two seasons — plotJagsSsm2ss","text":"","code":"plotJagsSsm2ss(   fit,   ssm_counts,   linear = TRUE,   plot_options = list(colors = NULL, pers_theme = NULL) )"},{"path":"https://africabirddata.github.io/BIRDIE/reference/plotJagsSsm2ss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot state series of a JAGS state-space model with two seasons — plotJagsSsm2ss","text":"fit JAGS state-space model fitted CWAC data ssm_counts data frame count data use fit state-space model linear TRUE (default) abundance estimates data transformed back original scale. plot_options list two elements: colors - colours points appear plot (two values), pers_theme  - personalized ggplot theme.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/plotJagsSsm2ss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot state series of a JAGS state-space model with two seasons — plotJagsSsm2ss","text":"list two elements: ) plot: plot summer winter fitted states, well long-term trend, ii) data: data used create individual plots. useful extracting data used ggplot render plots (e.g. exporting dashboard)","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/plotJagsSsm2ss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot state series of a JAGS state-space model with two seasons — plotJagsSsm2ss","text":"","code":"if (FALSE) { counts <- barberspan ssmcounts <- prepSsmData(counts, species = NULL) fit <- fitCwacSsm(ssmcounts, mod_file = \"mymodel.jags\", param = c(\"beta\", \"lambda\", \"sig.zeta\", \"sig.w\", \"sig.eps\", \"sig.alpha\", \"sig.e\", \"mu_t\", \"mu_wt\")) plotSsm2ss(fit = fit, ssm_counts = ssmcounts) }"},{"path":"https://africabirddata.github.io/BIRDIE/reference/plotOccuVars.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot occupancy covariates — plotOccuVars","title":"Plot occupancy covariates — plotOccuVars","text":"Plots selected covariates detection/non-detection data","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/plotOccuVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot occupancy covariates — plotOccuVars","text":"","code":"plotOccuVars(occu_data, vars, type = \"ind\")"},{"path":"https://africabirddata.github.io/BIRDIE/reference/plotOccuVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot occupancy covariates — plotOccuVars","text":"occu_data list occupancy site visit data. See ppl_create_site_visit vars Character vector names variables plot. must match names occu_data. type type plot want display. Either \"ind\" shows individual plots variable, \"cross\", shows scatterplot two variables. need pass exactly two variables.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/plotOccuVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot occupancy covariates — plotOccuVars","text":"plot detection/non-detection selected variables","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/postPredDistJagsSsm.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare posterior predictive distribution for JAGS state-space model — postPredDistJagsSsm","title":"Prepare posterior predictive distribution for JAGS state-space model — postPredDistJagsSsm","text":"function prepares data frame observed response corresponding estimates obtained Bayesian state-space model fitted JAGS","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/postPredDistJagsSsm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare posterior predictive distribution for JAGS state-space model — postPredDistJagsSsm","text":"","code":"postPredDistJagsSsm(fit, data, obs_error = TRUE, nsamples)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/postPredDistJagsSsm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare posterior predictive distribution for JAGS state-space model — postPredDistJagsSsm","text":"fit state-space model fitted JAGS data data used fit model fit. must counts CWAC data. See ppl_fit_ssm_model obs_error Logical. Indicates whether observation error included posterior simulations. Defaults TRUE. nsamples Number posterior samples used build data frame. Defaults 500.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/postPredDistJagsSsm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare posterior predictive distribution for JAGS state-space model — postPredDistJagsSsm","text":"data frame observed response corresponding estimates obtained Bayesian state-space model fitted JAGS. variable obs_sim correspond contains real simulated data. variable iter identifies iteration observation corresponds , observation iter = 0 /obs = 1 correspond observed data.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_create_data_ssm.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare covariate data for abundance pipeline — ppl_create_data_ssm","title":"Prepare covariate data for abundance pipeline — ppl_create_data_ssm","text":"Prepare covariate data abundance pipeline","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_create_data_ssm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare covariate data for abundance pipeline — ppl_create_data_ssm","text":"","code":"ppl_create_data_ssm(   sp_code,   year,   catchment,   config,   force_gee = TRUE,   force_gee_upload = TRUE,   steps = c(\"subset\", \"missing\", \"gee\", \"model\"),   ... )"},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_create_data_ssm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare covariate data for abundance pipeline — ppl_create_data_ssm","text":"sp_code SAFRING reference number species want analyse. year Year SSM data prepared. catchment sf object polygons corresponding catchment, reference area considered covariates associated CWAC sites. config list pipeline configuration parameters. See configPipeline force_gee Logical. TRUE (default), count data annotated environmental information GEE. FALSE, assume data already annotated manipulation join catchment environmental data count data required. force_gee_upload Logical. TRUE (default), catchment polygons uploaded GEE name 'quin_catchm'. FALSE, assume polygons already #' present GEE server need upload . steps character vector expressing processing steps CWAC data. can one : \"missing\" - add missing counts missing data, \"gee\" - annotate data covariates Google Earth Engine, \"subset\" - subset data sites presence species coverage least 10 years 1993 2021, \"model\" prepare data model fitting adding aux variables ordering data. defaults steps. ... arguments passed prepGEECatchmData","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_create_indtr_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Create indicator storage files — ppl_create_indtr_file","title":"Create indicator storage files — ppl_create_indtr_file","text":"Create indicator storage files","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_create_indtr_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create indicator storage files — ppl_create_indtr_file","text":"","code":"ppl_create_indtr_file(sp_code, year, overwrite_indtr)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_create_indtr_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create indicator storage files — ppl_create_indtr_file","text":"sp_code SAFRING code species run pipeline year Year run pipeline overwrite_indtr Logical. TRUE, existing files directories corresponding species config$species overwritten.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_create_site_visit.html","id":null,"dir":"Reference","previous_headings":"","what":"Create site and visit occupancy files — ppl_create_site_visit","title":"Create site and visit occupancy files — ppl_create_site_visit","text":"function prepares site visit occupancy data fit occupancy model ABAP data. two parts: first part downloads ABAP data annotates covariates Google Earth Engine using functions prepGEESiteData prepGEEVisitData, second part uses function createOccuData format data.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_create_site_visit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create site and visit occupancy files — ppl_create_site_visit","text":"","code":"ppl_create_site_visit(   config,   sp_code,   force_gee_dwld = FALSE,   force_site_visit = FALSE,   force_abap_dwld = FALSE,   monitor_gee = TRUE )"},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_create_site_visit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create site and visit occupancy files — ppl_create_site_visit","text":"config list pipeline configuration parameters. See configPipeline sp_code SAFRING code species run pipeline force_gee_dwld Whether covariates Google Earth Engine downloaded, even file covariates already present disk. Defaults FALSE. force_site_visit Whether site visit data prepared even visit site data files already disk. Defaults FALSE force_abap_dwld Indicates whether ABAP data must downloaded species years indicated 'sp_code' 'years'. TRUE, data downloaded ABAP per session cached temp file. cached file used, unless download set FALSE, case data downloaded regardless cached file. monitor_gee TRUE (default) periodic messages state downloads GEE printed screen.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_create_site_visit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create site and visit occupancy files — ppl_create_site_visit","text":"first part function creates two data frames (.csv format) saved disk: GEE annotated ABAP site data GEE annotated ABAP visit data. second part functions creates three data frames saved disk: site, visit species detection data frames, .csv format.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_diagnose_occu.html","id":null,"dir":"Reference","previous_headings":"","what":"Run diagnostics for occupancy model fit — ppl_diagnose_occu","title":"Run diagnostics for occupancy model fit — ppl_diagnose_occu","text":"function performs basic checks occupancy model fit, convergence parameters posterior predictive checks","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_diagnose_occu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run diagnostics for occupancy model fit — ppl_diagnose_occu","text":"","code":"ppl_diagnose_occu(fit, data = NULL, sp_code, year)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_diagnose_occu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run diagnostics for occupancy model fit — ppl_diagnose_occu","text":"fit spOccupancy model fit ABAP data. data dataset detection/non-detection data. used moment spOccupancy (currently used) fit objects contain data used fit model. sp_code SAFRING code species run pipeline year year pipeline run ","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_diagnose_occu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run diagnostics for occupancy model fit — ppl_diagnose_occu","text":"data frame Rhat values different parameters estimated model returned.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_diagnose_ssm.html","id":null,"dir":"Reference","previous_headings":"","what":"Run diagnostics for a state-space model fit — ppl_diagnose_ssm","title":"Run diagnostics for a state-space model fit — ppl_diagnose_ssm","text":"function performs basic checks SSM fit, convergence parameters posterior predictive checks","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_diagnose_ssm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run diagnostics for a state-space model fit — ppl_diagnose_ssm","text":"","code":"ppl_diagnose_ssm(fit, counts, sp_code, config)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_diagnose_ssm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run diagnostics for a state-space model fit — ppl_diagnose_ssm","text":"fit JAGS state-space model fitted CWAC data counts dataframe CWAC counts ready model fit. See ppl_create_data_ssm sp_code SAFRING reference number species want analyse. config list pipeline configuration parameters. See configPipeline","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_diagnose_ssm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run diagnostics for a state-space model fit — ppl_diagnose_ssm","text":"list Rhat values posterior check statistics returned. moment, obtain Rhat values monitored parameters three posterior check statistics: \"Tmean\" proportion posterior simulations mean greater observed data (like values close 0.5), \"Tsd\" proportion posterior simulations sd greater observed data (like values close 0.5), \"Tdiff\" mean difference observed data posterior simulations (like values close 0).","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_fit_occu_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit occupancy model — ppl_fit_occu_model","title":"Fit occupancy model — ppl_fit_occu_model","text":"Fit occupancy model","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_fit_occu_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit occupancy model — ppl_fit_occu_model","text":"","code":"ppl_fit_occu_model(sp_code, year_sel, config, spatial = FALSE, ...)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_fit_occu_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit occupancy model — ppl_fit_occu_model","text":"sp_code SAFRING code species run pipeline year_sel Year data run model . config list pipeline configuration parameters. See configPipeline spatial Whether spatial model fit. Defaults FALSE. ... arguments passed functions","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_fit_occu_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit occupancy model — ppl_fit_occu_model","text":"can return either number correspoding status fitting process: 1 - detections, 2 - detections, 3 - model fitting failed (inherited fitSpOccu)","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_fit_ssm_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit state-space JAGS model — ppl_fit_ssm_model","title":"Fit state-space JAGS model — ppl_fit_ssm_model","text":"Fit state-space JAGS model","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_fit_ssm_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit state-space JAGS model — ppl_fit_ssm_model","text":"","code":"ppl_fit_ssm_model(counts, sp_code, config, ...)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_fit_ssm_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit state-space JAGS model — ppl_fit_ssm_model","text":"counts data frame counts generated ppl_create_data_ssm sp_code SAFRING code species interest config list pipeline configuration parameters. See configPipeline ... parameters pass prepGEECatchmData","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_run_pipe_abu1.html","id":null,"dir":"Reference","previous_headings":"","what":"Run abundance pipeline ABU1 — ppl_run_pipe_abu1","title":"Run abundance pipeline ABU1 — ppl_run_pipe_abu1","text":"Run abundance pipeline ABU1","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_run_pipe_abu1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run abundance pipeline ABU1 — ppl_run_pipe_abu1","text":"","code":"ppl_run_pipe_abu1(   sp_code,   config,   steps = c(\"data\", \"fit\", \"diagnose\", \"summary\"),   prep_data_steps,   summary_scale = c(\"linear\", \"model\"),   ... )"},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_run_pipe_abu1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run abundance pipeline ABU1 — ppl_run_pipe_abu1","text":"sp_code SAFRING reference number species want analyse. config list pipeline configuration parameters. See configPipeline steps Pipeline steps run. can one : c(\"data\", \"fit\", \"diagnose\", \"summary\"). prep_data_steps Data preparation steps pass ppl_create_data_ssm summary_scale Either \"linear\", summaries given linear scale \"model\", summaries given modelling scale (typically log scale) ... parameters pass prepGEECatchmData","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_run_pipe_abu1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run abundance pipeline ABU1 — ppl_run_pipe_abu1","text":"function run whole abundance module BIRDIE pipeline","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_run_pipe_dst1.html","id":null,"dir":"Reference","previous_headings":"","what":"Run distribution indicators pipeline module 1 — ppl_run_pipe_dst1","title":"Run distribution indicators pipeline module 1 — ppl_run_pipe_dst1","text":"Module 1 distribution indicators pipeline estimates occupancy probabilities South Africa selected species. occupancy probabilities form basis building elaborated indicators pipeline modules.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_run_pipe_dst1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run distribution indicators pipeline module 1 — ppl_run_pipe_dst1","text":"","code":"ppl_run_pipe_dst1(   sp_code,   year,   config,   steps = c(\"data\", \"fit\", \"diagnose\", \"summary\"),   ... )"},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_run_pipe_dst1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run distribution indicators pipeline module 1 — ppl_run_pipe_dst1","text":"sp_code SAFRING code species run pipeline year Year run pipeline config list pipeline configuration parameters. See configPipeline steps character vector containing steps pipeline run. Can contain: \"data\", \"fit\", \"diagnose\", \"summary\". Defaults . ... arguments passed functions","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_summarise_occu.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise predictions from occupancy model — ppl_summarise_occu","title":"Summarise predictions from occupancy model — ppl_summarise_occu","text":"Summarise predictions occupancy model","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_summarise_occu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise predictions from occupancy model — ppl_summarise_occu","text":"","code":"ppl_summarise_occu(fit, sp_code, year_sel, config, ...)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_summarise_occu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise predictions from occupancy model — ppl_summarise_occu","text":"fit occupancy model fit summarise occupancy detection probabilities . sp_code SAFRING code species run pipeline year_sel Year data run model . config list pipeline configuration parameters. See configPipeline ... arguments passed functions","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_summarise_ssm.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise predictions from state-space JAGS model — ppl_summarise_ssm","title":"Summarise predictions from state-space JAGS model — ppl_summarise_ssm","text":"Summarise predictions state-space JAGS model","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_summarise_ssm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise predictions from state-space JAGS model — ppl_summarise_ssm","text":"","code":"ppl_summarise_ssm(fit, counts, sp_code, linear = TRUE, config, ...)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/ppl_summarise_ssm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise predictions from state-space JAGS model — ppl_summarise_ssm","text":"fit model fit generated ppl_fit_ssm_model counts data frame counts generated ppl_create_data_ssm sp_code SAFRING code species interest linear TRUE (default) summaries given linear scale. FALSE, summaries given modelling scale (typically log scale) config list pipeline configuration parameters. See configPipeline ... parameters pass prepGEECatchmData","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/predictSpOccu.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict from spOccupancy model fit — predictSpOccu","title":"Predict from spOccupancy model fit — predictSpOccu","text":"Predict spOccupancy model fit","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/predictSpOccu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict from spOccupancy model fit — predictSpOccu","text":"","code":"predictSpOccu(fit, sp_code, year_sel, config, ...)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/predictSpOccu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict from spOccupancy model fit — predictSpOccu","text":"fit occupancy model fit summarise occupancy detection probabilities . sp_code SAFRING code species run pipeline year_sel Year data run model . config list pipeline configuration parameters. See configPipeline ... arguments passed functions","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/predictSpOccu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict from spOccupancy model fit — predictSpOccu","text":"list two elements: 1) posterior occupancy probability samples South African pentads, 2) posterior detection probability samples visit ABAP data year year_sel.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepGEECatchmData.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Google Earth Engine data for catchments — prepGEECatchmData","title":"Prepare Google Earth Engine data for catchments — prepGEECatchmData","text":"Prepare Google Earth Engine data catchments","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepGEECatchmData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Google Earth Engine data for catchments — prepGEECatchmData","text":"","code":"prepGEECatchmData(sp_code, catchment, config, monitor = TRUE)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepGEECatchmData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Google Earth Engine data for catchments — prepGEECatchmData","text":"sp_code SAFRING reference number species want analyze. catchment sf object polygons defining catchments annotated. config list pipeline configuration parameters. See configPipeline monitor Logical. TRUE (default) monitoring printed messages produced rgee displayed. FALSE, high-level messages displayed.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepGEECatchmData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Google Earth Engine data for catchments — prepGEECatchmData","text":"assumed asset rgee::ee_get_assethome() named 'quin_catchm' polygons defining quinary catchments. Note add extra year start series. summer waterbird populations affected conditions previous year rather conditions following year.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepGEESiteData.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Google Earth Engine site data — prepGEESiteData","title":"Prepare Google Earth Engine site data — prepGEESiteData","text":"Prepare Google Earth Engine site data","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepGEESiteData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Google Earth Engine site data — prepGEESiteData","text":"","code":"prepGEESiteData(config, pentads, asset_id, upload_asset = TRUE, monitor = TRUE)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepGEESiteData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Google Earth Engine site data — prepGEESiteData","text":"config list pipeline configuration parameters. See configPipeline pentads sf spatial object set pentads want annotate environmental covariates. See getRegionPentads asset_id Character string name given object created Google Earth Engine (asset) contains sites pentads. upload_asset TRUE (default), object pentads uploaded Google Earth Engine asset name asset_id created. FALSE, assumed asset named asset_id already present GEE pentads uploaded. monitor Logical. TRUE (default) monitoring printed messages produced rgee displayed. FALSE, high-level messages displayed.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepGEESiteData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Google Earth Engine site data — prepGEESiteData","text":"Note GEE layers information past certain date. time writing surface water layers information 2021 human population density 2020. set code way data past last date layer get annotated latest available information. Take consideration analyses. Code updated information becomes available.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepGEEVisitData.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Google Earth Engine visit data — prepGEEVisitData","title":"Prepare Google Earth Engine visit data — prepGEEVisitData","text":"Prepare Google Earth Engine visit data","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepGEEVisitData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Google Earth Engine visit data — prepGEEVisitData","text":"","code":"prepGEEVisitData(config, visits, asset_id, upload_asset = TRUE, monitor = TRUE)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepGEEVisitData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Google Earth Engine visit data — prepGEEVisitData","text":"config list pipeline configuration parameters. See configPipeline visits sf spatial object visit data want annotate environmental covariates. Note need data spatial format, probably join pentad data. See getRegionPentads asset_id Character string name given object created Google Earth Engine (asset) contains sites visits. upload_asset TRUE (default), object visits uploaded Google Earth Engine asset name asset_id created. FALSE, assumed asset named asset_id already present GEE visits uploaded. monitor Logical. TRUE (default) monitoring printed messages produced rgee displayed. FALSE, high-level messages displayed.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepGEEVisitData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prepare Google Earth Engine visit data — prepGEEVisitData","text":"Note GEE layers information past certain date. time writing surface water layers information 2021 human population density 2020. set code way visits past last date layer get annotated latest available information. Take consideration analyses. Code updated information becomes available.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepSpOccuData_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare spOccupancy data for multi-season model fitting — prepSpOccuData_multi","title":"Prepare spOccupancy data for multi-season model fitting — prepSpOccuData_multi","text":"Prepare spOccupancy data multi-season model fitting","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepSpOccuData_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare spOccupancy data for multi-season model fitting — prepSpOccuData_multi","text":"","code":"prepSpOccuData_multi(sp_code, year, config, spatial = FALSE, ...)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepSpOccuData_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare spOccupancy data for multi-season model fitting — prepSpOccuData_multi","text":"sp_code SAFRING code species run pipeline year Year run pipeline config list pipeline configuration parameters. See configPipeline spatial Logical, indicating whether spatial random effects included model. Defaults FALSE. ... arguments passed functions","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepSpOccuData_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare spOccupancy data for single-season model fitting — prepSpOccuData_single","title":"Prepare spOccupancy data for single-season model fitting — prepSpOccuData_single","text":"Prepare spOccupancy data single-season model fitting","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepSpOccuData_single.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare spOccupancy data for single-season model fitting — prepSpOccuData_single","text":"","code":"prepSpOccuData_single(   site_data,   visit_data,   config,   spatial = FALSE,   sp_sites = NULL )"},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepSpOccuData_single.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare spOccupancy data for single-season model fitting — prepSpOccuData_single","text":"site_data data frame containing information covariates associated ABAP pentads given year. visit_data data frame information associated sampling visits ABAP pentads given year. Detection/non-detection data species interest must also included data frame. config list pipeline configuration parameters. See configPipeline spatial Logical, indicating whether spatial random effects included model. Defaults FALSE. sp_sites Spatial object sites used fitting spatial models","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepSsmData.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare CWAC data to fit a state-space model — prepSsmData","title":"Prepare CWAC data to fit a state-space model — prepSsmData","text":"Prepare CWAC data fit state-space model","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepSsmData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare CWAC data to fit a state-space model — prepSsmData","text":"","code":"prepSsmData(counts, spp_sel = NULL, keep = NULL)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepSsmData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare CWAC data to fit a state-space model — prepSsmData","text":"counts data frame raw CWAC count data spp_sel optional vector species codes. records species prepared fitting SSM, others discarded. keep vector variables keep processing. Useful, covariates interest. NULL, year, season, start date, count species name returned.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepSsmData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare CWAC data to fit a state-space model — prepSsmData","text":"tibble clean prepared data fitting SSM (e.g. filled missing years)","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/prepSsmData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare CWAC data to fit a state-space model — prepSsmData","text":"","code":"counts <- barberspan prepSsmData(counts) #> # A tibble: 34 × 5 #>     year Season StartDate  count spp   #>    <dbl> <chr>  <date>     <int> <chr> #>  1  1993 S      1993-01-23 11637 multi #>  2  1993 W      1993-07-10  4113 multi #>  3  1994 S      1994-01-15  2141 multi #>  4  1994 W      1994-07-16  7191 multi #>  5  1995 S      1995-01-28 16567 multi #>  6  1996 S      1996-01-01  2440 multi #>  7  1999 S      1999-01-16 11932 multi #>  8  1999 W      1999-09-12 22112 multi #>  9  2000 S      2000-01-29  1674 multi #> 10  2000 W      2000-07-15  8649 multi #> # ℹ 24 more rows prepSsmData(counts, spp_sel = 212) #> # A tibble: 34 × 5 #>     year Season StartDate  count spp              #>    <dbl> <chr>  <date>     <int> <chr>            #>  1  1993 S      1993-01-23  6996 Red-knobbed Coot #>  2  1993 W      1993-07-10  1451 Red-knobbed Coot #>  3  1994 S      1994-01-15   536 Red-knobbed Coot #>  4  1994 W      1994-07-16  2883 Red-knobbed Coot #>  5  1995 S      1995-01-28 14826 Red-knobbed Coot #>  6  1996 S      1996-01-01   559 Red-knobbed Coot #>  7  1999 S      1999-01-16  8981 Red-knobbed Coot #>  8  1999 W      1999-09-12 15628 Red-knobbed Coot #>  9  2000 S      2000-01-29   462 Red-knobbed Coot #> 10  2000 W      2000-07-15  4940 Red-knobbed Coot #> # ℹ 24 more rows prepSsmData(counts, spp_sel = c(212, 50)) #> # A tibble: 34 × 5 #>     year Season StartDate  count spp   #>    <dbl> <chr>  <date>     <int> <chr> #>  1  1993 S      1993-01-23  7002 multi #>  2  1993 W      1993-07-10  1451 multi #>  3  1994 S      1994-01-15   560 multi #>  4  1994 W      1994-07-16  2921 multi #>  5  1995 S      1995-01-28 14860 multi #>  6  1996 S      1996-01-01   680 multi #>  7  1999 S      1999-01-16  9321 multi #>  8  1999 W      1999-09-12 15774 multi #>  9  2000 S      2000-01-29   655 multi #> 10  2000 W      2000-07-15  5571 multi #> # ℹ 24 more rows"},{"path":"https://africabirddata.github.io/BIRDIE/reference/processJAGSoutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Process JAGS model outputs — processJAGSoutput","title":"Process JAGS model outputs — processJAGSoutput","text":"Process JAGS model outputs","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/processJAGSoutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Process JAGS model outputs — processJAGSoutput","text":"","code":"processJAGSoutput(fit, DIC, params.omit, verbose = TRUE)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/processJAGSoutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Process JAGS model outputs — processJAGSoutput","text":"fit JAGS state-space model fitted CWAC data DIC Logical stating whether DIC computed params.omit character vector name parameters processed. verbose Logical. TRUE (default), several messages displayed processing.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/processJAGSoutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Process JAGS model outputs — processJAGSoutput","text":"list two elements: ) plot: plot summer winter fitted states, well long-term trend, ii) data: data used create individual plots. useful extracting data used ggplot render plots (e.g. exporting dashboard)","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/scaleSpOccVars.html","id":null,"dir":"Reference","previous_headings":"","what":"Scale covariates in spOccupancy-type data — scaleSpOccVars","title":"Scale covariates in spOccupancy-type data — scaleSpOccVars","text":"Scale covariates spOccupancy-type data","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/scaleSpOccVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scale covariates in spOccupancy-type data — scaleSpOccVars","text":"","code":"scaleSpOccVars(spOcc_data, var_type, scale_vars)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/scaleSpOccVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scale covariates in spOccupancy-type data — scaleSpOccVars","text":"spOcc_data spOccupancy data list. var_type Type variables want scale. Currently, one \"occ\" occupancy covariates, \"det\" detection covariates. scale_vars vector names covariates want scale.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/scaleSpOccVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scale covariates in spOccupancy-type data — scaleSpOccVars","text":"spOccupancy data list scaled covariates, substituting original, unscaled covariates. single factor used center scale data (across dimensions) covariate. means, example, seasons scaled amount. factors used centering scaling stored attributes covariate.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/selectSppFromDiag.html","id":null,"dir":"Reference","previous_headings":"","what":"Select species based on model diagnostics — selectSppFromDiag","title":"Select species based on model diagnostics — selectSppFromDiag","text":"datapipeline produces one occupancy diagnostic file species year. function combines files returns species convergence goodnes--fit issues.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/selectSppFromDiag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select species based on model diagnostics — selectSppFromDiag","text":"","code":"selectSppFromDiag(config, sp_codes, year, module = c(\"dst\", \"abu\"))"},{"path":"https://africabirddata.github.io/BIRDIE/reference/selectSppFromDiag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select species based on model diagnostics — selectSppFromDiag","text":"config list pipeline configuration parameters. See configPipeline. sp_codes SAFRING reference numbers species want diagnostics . year year diagnostics required. module Either \"dst\" want occupancy diagnostics \"abu\" want state-space model diagnostics.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/selectSppFromDiag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Select species based on model diagnostics — selectSppFromDiag","text":"list two elements: $no_converge, contains codes species convergence issues, $bad_fit, contains codes species goodness--fit issues (small Bayesian p-value).","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/selectSppFromDiag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select species based on model diagnostics — selectSppFromDiag","text":"","code":"if (FALSE) { config <- configPipeline(year = 2010,                          dur = 3,                          occ_mod = c(\"log_dist_coast\", \"elev\", \"log_hum.km2\", \"wetcon\",                                      \"watrec\", \"watext\", \"log_watext\", \"watext:watrec\",                                      \"ndvi\", \"prcp\", \"tdiff\"),                          det_mod = c(\"(1|obs_id)\", \"log_hours\", \"prcp\", \"tdiff\", \"cwac\"),                          fixed_vars = c(\"Pentad\", \"lon\", \"lat\", \"watocc_ever\", \"wetext_2018\",\"wetcon_2018\",                                         \"dist_coast\", \"elev\"),                          package = \"spOccupancy\",                          data_dir = \"analysis/hpc/imports\",                          out_dir = \"analysis/hpc/imports\",                          server = TRUE) sp_codes <- config$species  selectSppFromDiag(config, sp_codes, 2008) }"},{"path":"https://africabirddata.github.io/BIRDIE/reference/setSpOutFilePath.html","id":null,"dir":"Reference","previous_headings":"","what":"Set a standard path for a pipeline output file associated with a species — setSpOutFilePath","title":"Set a standard path for a pipeline output file associated with a species — setSpOutFilePath","text":"datapipeline produces many output files. function creates standard output file path files associated particular species. might instances need name deviates standard. need handle exceptions case case. files associated particular species follow different standards.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/setSpOutFilePath.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set a standard path for a pipeline output file associated with a species — setSpOutFilePath","text":"","code":"setSpOutFilePath(prefix, config, years, sp_code, ext)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/setSpOutFilePath.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set a standard path for a pipeline output file associated with a species — setSpOutFilePath","text":"prefix character string prefix appear beginning name. distinguishes files within species directory. config list pipeline configuration parameters. See configPipeline. years Character string years include name. sp_code SAFRING reference number species want analyze. ext extension output file. Note must add trailing '.' extension.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/setSpOutFilePath.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set a standard path for a pipeline output file associated with a species — setSpOutFilePath","text":"character string path /pipeline output file","code":""},{"path":[]},{"path":"https://africabirddata.github.io/BIRDIE/reference/simDetSpOccu.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate detections from spOccupancy fit — simDetSpOccu","title":"Simulate detections from spOccupancy fit — simDetSpOccu","text":"function comes largely fitted.PGOcc.R spOccupancy package","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/simDetSpOccu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate detections from spOccupancy fit — simDetSpOccu","text":"","code":"simDetSpOccu(object)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/simDetSpOccu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate detections from spOccupancy fit — simDetSpOccu","text":"object spOccupancy fit","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/simDetSpOccu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate detections from spOccupancy fit — simDetSpOccu","text":"list posterior detection probabilities samples posterior detection predictions samples. results given long format attribute indices sites samples correspond ","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/summariseSpOccu.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise spOccupancy occupancy estimates — summariseSpOccu","title":"Summarise spOccupancy occupancy estimates — summariseSpOccu","text":"spOccupancy produces estimates detection probability visit occupancy probabilities site. functions takes predictions creates detection probabilities, occupancy probabilities realized occupancy probabilities (occupancy probabilities conditional observed data) site.","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/summariseSpOccu.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise spOccupancy occupancy estimates — summariseSpOccu","text":"","code":"summariseSpOccu(pred_p, pred_psi, quants)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/summariseSpOccu.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise spOccupancy occupancy estimates — summariseSpOccu","text":"pred_p Detection probabilities estimated spOccupancy model. must matrix (mcmc object) row corresponding MCMC sample column corresponding visit. object must contain \"pentad\" attribute indicating pentad column correspond , attribute \"year\" indicating year probabilities correspond , attribute \"obs\" indicating whether species detected visit . Outputs predictSpOccu, readily appropriate. pred_psi Occupancy probabilities estimated spOccupancy model. must matrix (mcmc object) row corresponding MCMC sample column corresponding pentad. object must contain \"pentad\" attribute indicating pentad column correspond , attribute \"year\" indicating year probabilities correspond . Outputs predictSpOccu, readily appropriate. quants Quantiles summarise predictions distribution passed c(\"lower\", \"med\", \"upper\").","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/summariseSpOccu.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise spOccupancy occupancy estimates — summariseSpOccu","text":"tibble estimates /quantiles pentad site_data: psi: occupancy probability, p: detection probability, occu: realized occupancy (occupancy conditional data).","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/summaryJags.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise JAGS model fit — summaryJags","title":"Summarise JAGS model fit — summaryJags","text":"Summarise JAGS model fit","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/summaryJags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise JAGS model fit — summaryJags","text":"","code":"summaryJags(fit, param = NULL)"},{"path":"https://africabirddata.github.io/BIRDIE/reference/summaryJags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise JAGS model fit — summaryJags","text":"fit JAGS state-space model fitted CWAC data param character vector name parameters want summarise","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/waterbirds.html","id":null,"dir":"Reference","previous_headings":"","what":"BIRDIE's waterbird masterlist — waterbirds","title":"BIRDIE's waterbird masterlist — waterbirds","text":"dataset containing information waterbird species analysed BIRDIE pipeline","code":""},{"path":"https://africabirddata.github.io/BIRDIE/reference/waterbirds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"BIRDIE's waterbird masterlist — waterbirds","text":"","code":"waterbirds"},{"path":"https://africabirddata.github.io/BIRDIE/reference/waterbirds.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"BIRDIE's waterbird masterlist — waterbirds","text":"data frame 147 rows 19 variables: Assess_for_AEWA Assessment AEWA? Common_group Taxonomic group. Common_name Common name species. Common_species Taxonomic species. Family Taxnomic family. Feeding_guild Feeding guild information. Feeding_guild_alt Alternative feeding guild information. Foraging_habitat_guild Foraging habitat guild information. Foraging_habitat_guild_detail Detailed foraging habitat guild information. Genus Taxonomic genus. Key_habitat_indicator Key habitat indicator. Migrant_type Migrant type. Order Taxonomic order. Recorded_Barberspan Recorded Barberspan? Species Species information. Species_group_guild Species group guild information. SppRef Species reference code. Status Status information. WetlandIntCode Wetlands International code.","code":""}]
